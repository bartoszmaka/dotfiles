filetype off
call plug#begin()

Plug 'rking/ag.vim'                                               " searching engine
Plug 'ludovicchabant/vim-gutentags'
Plug 'w0rp/ale'                                                   " async syntax checking
Plug 'tpope/vim-fugitive'                                         " git related commands
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'pbogut/fzf-mru.vim'
Plug 'mhinz/vim-grepper'

Plug 'easymotion/vim-easymotion'                                  " adds improved w e b j k
Plug 'jiangmiao/auto-pairs'                                       " auto insert parentheses, quotes etc.
Plug 'terryma/vim-multiple-cursors'
Plug 'alvan/vim-closetag'                                         " autoclose html tag
Plug 'tpope/vim-surround'                                         " vim verb for surrounding word
Plug 'tpope/vim-commentary'                                       " change selected code into comment
Plug 'tpope/vim-endwise'                                          " auto insert 'end', 'endif' etc.
Plug 'AndrewRadev/splitjoin.vim'

Plug 'scrooloose/nerdtree'                                        " project explorer
Plug 'nathanaelkane/vim-indent-guides'                            " visualize indent level
Plug 'joshdick/onedark.vim'                                       " colorscheme
Plug 'szw/vim-maximizer'                                          " maximize window
Plug 'ryanoasis/vim-devicons'                                     " Fancy icons
Plug 'airblade/vim-gitgutter'                                     " shows git signs next to line numbers
Plug 'bling/vim-airline'                                          " UI improvement
Plug 'vim-airline/vim-airline-themes'                             " themes for airline

Plug 'elixir-editors/vim-elixir',        { 'for': ['elixir', 'eelixir'] }
Plug 'slashmili/alchemist.vim',          { 'for': ['elixir', 'eelixir'] }

" lazy
" Plug 'simnalamburt/vim-mundo'                                     " perview undos
" Plug 'godlygeek/tabular'
call plug#end()

let mapleader="\<Space>"

set shell=/bin/zsh                      " shell path
set novisualbell
set undofile                            " keep history in file
set undodir=$HOME/.vim/undo             " path for this file
set noswapfile
set nobackup
set autoread
set lazyredraw
set hidden                              " don't close buffers
language en_US.UTF-8
set langmenu=en_US.UTF-8
set fileencoding=utf-8
set encoding=utf8
set autoindent
set smartindent
set scrolloff=4                         " show at least 4 lines above or under cursor
set sidescrolloff=5
set splitright                          " place new vertical split on right side of current window
set splitbelow                          " place new horizontal split under current window
set smarttab
set softtabstop=2
set shiftwidth=2                        " default tab width
set expandtab                           " Spaces instead of tabs
set synmaxcol=180                       " disable syntax colors after given column
set colorcolumn=120                     " color 120th column
set textwidth=0                         " do not break lines automatically
set nowrap                              " don't wrap lines
set ignorecase
set smartcase
set hlsearch
set incsearch
set mouse=a
set laststatus=2                        " always show status line
set showcmd                             " show pressed keys
set number                              " show line numbers
set norelativenumber
set signcolumn=auto                     " make place for symbols next to line numbers
set ruler
set cursorline                          " Highlight current line
set termguicolors
set background=dark
colorscheme onedark

let g:closetag_filenames               = '*.html,*.xhtml,*.phtml,*.js,*.jsx,*.erb'
let g:closetag_xhtml_filenames         = '*.xhtml,*.jsx,*.js,*.erb'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_shortcut                = '>'
let g:indent_guides_exclude_filetypes                = ['help', 'nerdtree', 'startify', 'quickfix', 'qf']
let g:indent_guides_auto_colors                      = 1
let g:indent_guides_enable_on_vim_startup            = 1
let g:ale_sign_error           = '->'
let g:ale_sign_warning         = '::'
let g:ale_lint_on_save         = 1
let g:ale_lint_on_text_changed = 'never'
let g:webdevicons_enable_nerdtree                    = 0
let g:WebDevIconsNerdTreeAfterGlyphPadding           = ''
let g:fzf_command_prefix = 'Fzf'

let g:gutentags_ctags_exclude = ["node_modules", ".git"]

augroup remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

augroup tweak-hls
  autocmd!
  autocmd InsertEnter * setlocal nohls
augroup END

cabbrev W   w
cabbrev Wa   w
cabbrev Wq  wq
cabbrev Wqa wqa
cabbrev Q   q
cabbrev Qa  qa
cabbrev Q!   q
cabbrev Qa!  qa

let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-c>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
nnoremap <C-p><C-p> :FZF<CR>
nnoremap <C-p><C-r> :FZFFreshMru<CR>
nnoremap <C-p><C-g> :FzfGitFiles<CR>
nnoremap <C-p><C-h> :FzfHistory<CR>
nnoremap <C-p><C-b> :FzfBuffers<CR>
nnoremap <C-p><C-f> :FzfAg<CR>
nnoremap <C-p><C-l> :FzfLines<CR>
nnoremap <C-p><C-v> :FzfCommits<CR>
nnoremap <C-p><C-w> :FzfWindows<CR>
nnoremap <C-m><C-g> :Grepper<CR>

nnoremap <C-m><C-g> :Grepper<CR>
nnoremap <C-m><C-f> :ALEFix<CR>
nnoremap <C-m><C-l> :ALELint<CR>
nnoremap <C-m><C-w> :set list!<CR>

nnoremap <C-m><C-d> :SplitjoinJoin<cr>
nnoremap <C-m><C-s> :SplitjoinSplit<cr>

nnoremap <C-g><C-d> :Gdiff<CR>
nnoremap <C-g><C-s> :Gstatus<CR>
nnoremap <C-g><C-b> :Gblame<CR>
nnoremap <C-k><C-f> :NERDTreeFind<CR>zz
nnoremap <C-k><C-e> :NERDTreeToggle<CR>
let g:maximizer_default_mapping_key = '<C-w>m'
nnoremap <leader>q :close<CR>
nnoremap n     nzz
nnoremap N     Nzz
nnoremap <C-o> <C-o>zz
nnoremap <C-i> <C-i>zz
nnoremap <leader>F bye:%s/<C-r>"/
vnoremap <leader>F y:%s/<C-r>"/
nnoremap <C-a>     ggVG
nnoremap <leader>a <C-a>
vnoremap <leader>y "+y
nnoremap <leader>Y "+yg_
nnoremap <leader>y "+y
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P
nnoremap j gj
nnoremap k gk
nnoremap <leader>j i<CR><Esc>
nnoremap <leader>k <esc>kJ
map <leader>h ^
map <leader>l $
inoremap ii <Esc>
vnoremap ii <Esc>

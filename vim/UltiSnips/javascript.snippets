snippet switch "switch statement" w
switch (${1}) {
  case ${2}:
}
endsnippet

snippet if "if statement" w
if (${1}) {
  ${2}
}
endsnippet

snippet ita "jest it async" w
it('${1}', async () => {
  ${2}
});
endsnippet

snippet it "jest it" w
it('${1}', () => {
  ${2}
});
endsnippet

snippet test "jest test" w
test('${1}', () => {
  ${2}
});
endsnippet

snippet de  "jest describe" w
describe('${1}', () => {
  ${2}
});
endsnippet

snippet desc  "jest describe" w
describe('${1}', () => {
  ${2}
});
endsnippet

snippet con "desctucture object" w
const { ${1} } = ${2}
endsnippet

snippet re "require()" w
const ${1} = require('${2}');
endsnippet

snippet imp "import module from " w
import ${2:moduleName} from '${1:module}';
endsnippet

snippet e "export" w
export ${1}
endsnippet

snippet c "const" w
const ${1}
endsnippet

snippet ed "export default" w
export default ${1}
endsnippet

snippet ec "export const" w
export const ${1}
endsnippet

snippet cl "console.log" w
console.log(${1})
endsnippet

snippet ct "constructor" w
constructor(${1}) {
  ${2}
}
endsnippet

snippet ctr "component constructor" w
constructor(props) {
  super(props);
  ${1}
}
endsnippet

snippet teao "to eq array containing obj matching" w
toEqual(
  expect.arrayContaining([
    expect.objectContaining({
      ${1}
    })
  ])
)
endsnippet

snippet tea "to eq array containing" w
toEqual(
  expect.arrayContaining([
    ${1}
  ])
)
endsnippet

snippet teo "to eq object containing" w
toEqual(
  expect.objectContaining({
    ${1}
  })
)
endsnippet

snippet sctr "Scaffold test react component" w
import React from 'react';
import { shallow } from 'enzyme';
import toJson from 'enzyme-to-json';

import { ${1} } from '../${1}';

const setup = (newProps = {}, rendering = shallow) => {
  const props = {
    ${2}
    ...newProps,
  };

  const wrapper = rendering(<${1} {...props} />);

  return { wrapper, props };
};
${3}
endsnippet

snippet etms "expect to match snapshot" w
expect(${1:toJson(wrapper)}).toMatchSnapshot()
endsnippet

snippet jfn "jest.fn()" w
jest.fn()
endsnippet

snippet scsnap "Description" b
import React from 'react'
import { shallow } from 'enzyme'
import toJson from 'enzyme-to-json'

import { ${1} } from '${2}'

describe('${1}', () => {
  it('should match the snapshot', () => {
    const props = {
      ${3}
    }

    const wrapper = shallow(<${1} {...props} />)

    expect(toJson(wrapper)).toMatchSnapshot()
  })
})
endsnippet

snippet jstr "JSON.stringify" w
JSON.stringify(${1}, null, 2)
endsnippet

snippet imr "import React" w
import React from 'react';
endsnippet

snippet rcla "component class" w
class ${1} extends Component {
  render() {
    return (
      ${2}
    );
  }
}
endsnippet

snippet msp "mapStateToProps" w
mapStateToProps
endsnippet

snippet mdp "mapDispatchToProps" w
mapDispatchToProps
endsnippet

snippet cwm "componentWillMount" w
componentWillMount(${1}) {${2}}
endsnippet

snippet cdm "componentDidMount" w
componentDidMount(${1}) {${2}}
endsnippet

snippet cwr "componentWillReceiveProps" w
componentWillReceiveProps(${1}) {${2}}
endsnippet

snippet scu "shouldComponentUpdate" w
shouldComponentUpdate(${1}) {${2}}
endsnippet

snippet cwup "componnetWillUpdate" w
componnetWillUpdate(${1}) {${2}}
endsnippet

snippet cdup "componentDidUpdate" w
componentDidUpdate(${1}) {${2}}
endsnippet

snippet cwun "componentWillUnmount" w
componentWillUnmount(${1}) {${2}}
endsnippet

snippet cdc "componentDidCatch" b
componentDidCatch(error, info) {${1}}
endsnippet

snippet ren "render" w
render() {
  ${1}
  return (
    <div>
      ${2}
    </div>
  )
}
endsnippet

snippet spt "static propTypes" w
static propTypes = {
  ${1}
}
endsnippet

snippet sdp "static defaultProps" w
static defaultProps = {
  ${1}
}
endsnippet

snippet pt "PropTypes" w
PropTypes.
endsnippet

snippet pto "PropTypes.shape({})" w
PropTypes.shape({})
endsnippet

snippet ptor "PropTypes.shape({}).isRequired" w
PropTypes.shape({}).isRequired,
endsnippet

snippet pta "PropTypes.arrayOf()" w
PropTypes.arrayOf(${1})${2}
endsnippet

snippet ptar "PropTypes.arrayOf().isRequired" w
PropTypes.arrayOf(${1}).isRequired,${2}
endsnippet

snippet ptf "PropTypes.func" w
PropTypes.func
endsnippet

snippet ptfr "PropTypes.func.isRequired" w
PropTypes.func.isRequired,
endsnippet

snippet ptst "PropTypes.string" w
PropTypes.string
endsnippet

snippet ptstr "PropTypes.string.isRequired" w
PropTypes.string.isRequired,
endsnippet

snippet ptb "PropTypes.bool" w
PropTypes.bool
endsnippet

snippet ptbr "PropTypes.bool.isRequired" w
PropTypes.bool.isRequired,
endsnippet

snippet ptn "PropTypes.number" w
PropTypes.number
endsnippet

snippet ptnr "PropTypes.number.isRequired" w
PropTypes.number.isRequired,
endsnippet

snippet ptsy "PropTypes.symbol" w
PropTypes.symbol
endsnippet

snippet ptsyr "PropTypes.symbol.isRequired" w
PropTypes.symbol.isRequired,
endsnippet

snippet ptsh "PropTypes.shape" w
PropTypes.shape({${1}})${2}
endsnippet

snippet ptshr "PropTypes.shape.isRequired" w
PropTypes.shape({${1}}).isRequired,${2}
endsnippet

snippet ptc "PropTypes.node" w
PropTypes.node
endsnippet

snippet ptcr "PropTypes.node.isRequired" w
PropTypes.node.isRequired
endsnippet

snippet tss "this.setState" w
this.setState({${1}})
endsnippet

snippet tssp "setState prevState" w
this.setState((prevState) => ${1})
endsnippet

snippet tsspp "setState full" w
this.setState((prevState, prevProps) => ${1})
endsnippet

snippet ue "useEffect" b
useEffect(() => {
  $1
  return () => {
    $2
  };
}, $3)
endsnippet

snippet us "useState" b
const [$1, `!p
withUpcasedLetter = (t[1][0]).upper() + t[1][1:] if len(t[1]) > 0 else ''
snip.rv = 'set' + withUpcasedLetter
`] = useState(${2:null})
endsnippet

snippet scfnc "Scaffold functional component" b
import React from 'react'

const ${1} = (${2}) => {
  return (
    ${3}
  )
}

export default ${1}
endsnippet

snippet scclc "Scaffold class component" b
import React, { Component } from 'react'

export class ${1} extends Component {
  render() {
    return (
      ${2}
    )
  }
}

export default ${1}
endsnippet

snippet scrfnc "Scaffold redux connected functional component" b
import React from 'react'
import { connect } from 'react-redux'

const ${1} = (${2}) => {
  return (
    ${3}
  )
}

const mapStateToProps = state => ({

})
const mapDispatchToProps = {}

export default connect(
  mapStateToProps,
  mapDispatchToProps,
)(${1})
endsnippet

snippet scrclc "Scaffold redux connected class component" b
import React, { Component } from 'react'
import { connect } from 'react-redux'

export class ${1} extends Component {
  render() {
    return (
      ${2}
    )
  }
}

const mapStateToProps = state => ({

})
const mapDispatchToProps = {}

export default connect(
  mapStateToProps,
  mapDispatchToProps,
)(${1})
endsnippet

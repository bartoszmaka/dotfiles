priority 50
global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal
# A valid snippet should starts with:
#
#		snippet trigger_w ["description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-w expansion.
#		w - w boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter"emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet afn "arrow function" w
($1) => {$2}
endsnippet

snippet fn "arrow function" w
($1) => {$2}
endsnippet

snippet fun "function" w
($1) {$2}
endsnippet

snippet switch "switch statement" w
switch (${1}) {
  case ${2}:
}
endsnippet

snippet if "if statement" w
if (${1}) {
  ${2}
}
endsnippet

snippet ita "jest it async" w
it('${1}', async () => {
  ${2}
});
endsnippet

snippet it "jest it" w
it('${1}', () => {
  ${2}
});
endsnippet

snippet test "jest test" w
test('${1}', () => {
  ${2}
});
endsnippet

snippet de  "jest describe" w
describe('${1}', () => {
  ${2}
});
endsnippet

# snippet desc  "jest describe" w
# describe('${1}', () => {
#   ${2}
# });
# endsnippet

snippet con "desctucture object" w
const { ${1} } = ${2}
endsnippet

snippet re "require()" w
const ${1} = require('${2}');
endsnippet

snippet imp "import module from " w
import ${2:moduleName} from '${1:module}';
endsnippet

snippet e "export" w
export ${1}
endsnippet

snippet c "const" w
const ${1}
endsnippet

snippet ed "export default" w
export default ${1}
endsnippet

snippet ec "export const" w
export const ${1}
endsnippet

snippet cl "console.log" w
console.log(${1})
endsnippet

snippet ct "constructor" w
constructor(${1}) {
  ${2}
}
endsnippet

snippet ctr "component constructor" w
constructor(props) {
  super(props);
  ${1}
}
endsnippet

snippet teao "to eq array containing obj matching" w
toEqual(
  expect.arrayContaining([
    expect.objectContaining({
      ${1}
    })
  ])
)
endsnippet

snippet tea "to eq array containing" w
toEqual(
  expect.arrayContaining([
    ${1}
  ])
)
endsnippet

snippet teo "to eq object containing" w
toEqual(
  expect.objectContaining({
    ${1}
  })
)
endsnippet

snippet sctr "Scaffold test react component" w
import React from 'react';
import { shallow } from 'enzyme';
import toJson from 'enzyme-to-json';

import { ${1} } from '../${1}';

const setup = (newProps = {}, rendering = shallow) => {
  const props = {
    ${2}
    ...newProps,
  };

  const wrapper = rendering(<${1} {...props} />);

  return { wrapper, props };
};
${3}
endsnippet

snippet etms "expect to match snapshot" w
expect(${1:toJson(wrapper)}).toMatchSnapshot()
endsnippet

snippet jfn "jest.fn()" w
jest.fn()
endsnippet

snippet scsnap "Description" b
import React from 'react'
import { shallow } from 'enzyme'
import toJson from 'enzyme-to-json'

import { ${1} } from '${2}'

describe('${1}', () => {
  it('should match the snapshot', () => {
    const props = {
      ${3}
    }

    const wrapper = shallow(<${1} {...props} />)

    expect(toJson(wrapper)).toMatchSnapshot()
  })
})
endsnippet

snippet jstr "JSON.stringify" w
JSON.stringify(${1}, null, 2)
endsnippet

snippet idb "inline debugger" w
(() => { debugger })()
endsnippet

snippet tcd "try-catch data" w
try {
	${1}
	return [result, null]
} catch (error) {
	return [null, error]
}
endsnippet


snippet tc "try-catch" w
try {
	${1}
} catch (error) {
	${2}
}
endsnippet

snippet ef "export function" w
export function 
endsnippet

snippet eaf "export async function" w
export async function 
endsnippet

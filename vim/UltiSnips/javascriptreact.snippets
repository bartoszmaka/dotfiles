priority 60
# snippet imr "import React" w
# import React from 'react'
# endsnippet

global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

snippet rcla "component class" w
class ${1} extends Component {
  render() {
    return (
      ${2}
    )
  }
}
endsnippet

snippet msp "mapStateToProps" w
mapStateToProps
endsnippet

snippet mdp "mapDispatchToProps" w
mapDispatchToProps
endsnippet

snippet cwm "componentWillMount" w
componentWillMount(${1}) {${2}}
endsnippet

snippet cdm "componentDidMount" w
componentDidMount(${1}) {${2}}
endsnippet

snippet cwr "componentWillReceiveProps" w
componentWillReceiveProps(${1}) {${2}}
endsnippet

snippet scu "shouldComponentUpdate" w
shouldComponentUpdate(${1}) {${2}}
endsnippet

snippet cwup "componnetWillUpdate" w
componnetWillUpdate(${1}) {${2}}
endsnippet

snippet cdup "componentDidUpdate" w
componentDidUpdate(${1}) {${2}}
endsnippet

snippet cwun "componentWillUnmount" w
componentWillUnmount(${1}) {${2}}
endsnippet

snippet cdc "componentDidCatch" b
componentDidCatch(error, info) {${1}}
endsnippet

snippet ren "render" w
render() {
  ${1}
  return (
    <div>
      ${2}
    </div>
  )
}
endsnippet

snippet spt "static propTypes" w
static propTypes = {
  ${1}
}
endsnippet

snippet sdp "static defaultProps" w
static defaultProps = {
  ${1}
}
endsnippet

snippet pt "PropTypes" w
PropTypes.
endsnippet

snippet pto "PropTypes.shape({})" w
PropTypes.shape({})
endsnippet

snippet ptor "PropTypes.shape({}).isRequired" w
PropTypes.shape({}).isRequired,
endsnippet

snippet ptobj "PropTypes.object" w
PropTypes.object
endsnippet

snippet ptobjr "PropTypes.object.isRequired" w
PropTypes.object.isRequired,
endsnippet

snippet pta "PropTypes.arrayOf()" w
PropTypes.arrayOf(${1})${2}
endsnippet

snippet ptar "PropTypes.arrayOf().isRequired" w
PropTypes.arrayOf(${1}).isRequired,${2}
endsnippet

snippet ptf "PropTypes.func" w
PropTypes.func
endsnippet

snippet ptfr "PropTypes.func.isRequired" w
PropTypes.func.isRequired,
endsnippet

snippet ptst "PropTypes.string" w
PropTypes.string
endsnippet

snippet ptstr "PropTypes.string.isRequired" w
PropTypes.string.isRequired,
endsnippet

snippet ptb "PropTypes.bool" w
PropTypes.bool
endsnippet

snippet ptbr "PropTypes.bool.isRequired" w
PropTypes.bool.isRequired,
endsnippet

snippet ptn "PropTypes.number" w
PropTypes.number
endsnippet

snippet ptnr "PropTypes.number.isRequired" w
PropTypes.number.isRequired,
endsnippet

snippet ptsy "PropTypes.symbol" w
PropTypes.symbol
endsnippet

snippet ptsyr "PropTypes.symbol.isRequired" w
PropTypes.symbol.isRequired,
endsnippet

snippet ptsh "PropTypes.shape" w
PropTypes.shape({${1}})${2}
endsnippet

snippet ptshr "PropTypes.shape.isRequired" w
PropTypes.shape({${1}}).isRequired,${2}
endsnippet

snippet ptc "PropTypes.node" w
PropTypes.node
endsnippet

snippet ptcr "PropTypes.node.isRequired" w
PropTypes.node.isRequired
endsnippet

snippet tss "this.setState" w
this.setState({${1}})
endsnippet

snippet tssp "setState prevState" w
this.setState((prevState) => ${1})
endsnippet

snippet tsspp "setState full" w
this.setState((prevState, prevProps) => ${1})
endsnippet

snippet us "useState" w
const [$1, set`!p snip.rv=upperfirst(t[1])`] = useState($2)
endsnippet

snippet ue "useEffect()" b
useEffect(() => {
	$0
}, [$1])
endsnippet

snippet um "useMemo" b
const ${1} = useMemo(() => ${3}, [${2}])
endsnippet

snippet uc "useContext" b
const ${1} = useContext((${2})
endsnippet

snippet scfn
import React from 'react'

const ${1} = (${2:props}) => {
  return (
    <pre>{JSON.stringify(props, null, 2)}</pre>
  )
}

export default ${1}
endsnippet

snippet sccl
import React, { Component } from 'react'

export class ${1} extends Component {
  render() {
    return (
      ${2}
    )
  }
}

export default ${1}
endsnippet

snippet scrfn
import React from 'react'
import { connect } from 'react-redux'

const ${1} = (${2}) => {
  return (
    ${3}
  )
}

const mapStateToProps = state => ({

})

const mapDispatchToProps = {}

export default connect(
  mapStateToProps,
  mapDispatchToProps,
)(${1})
endsnippet

snippet scrcl
import React, { Component } from 'react'
import { connect } from 'react-redux'

export class ${1} extends Component {
  render() {
    return (
      ${2}
    )
  }
}

const mapStateToProps = state => ({

})

const mapDispatchToProps = {}

export default connect(
  mapStateToProps,
  mapDispatchToProps,
)(${1})
endsnippet

snippet edn
// eslint-disable-next-line ${1}
endsnippet

snippet ed
// eslint-disable ${1}
endsnippet

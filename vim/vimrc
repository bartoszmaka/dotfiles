filetype off
call plug#begin()
Plug 'sheerun/vim-polyglot'
Plug 'Yggdroot/indentLine'                                         " display indent guides
Plug 'joshdick/onedark.vim'                                        " colorscheme
Plug 'bling/vim-airline'                                           " UI improvement
Plug 'vim-airline/vim-airline-themes'                              " themes for airline

Plug 'tpope/vim-commentary'                                        " change selected code into comment
Plug 'tpope/vim-repeat'                                            " better .
Plug 'easymotion/vim-easymotion'                                   " adds improved w e b j k
Plug 'rhysd/clever-f.vim'                                          " better f F

if exists('$TMUX')
  Plug 'christoomey/vim-tmux-navigator'                            " move between vim windows and tmux panes with the same mapping
  Plug 'christoomey/vim-tmux-runner'                               " run tests in other tmux pane
  Plug 'roxma/vim-tmux-clipboard'                                  " sync with tmux clipboard
endif

Plug 'andymass/vim-matchup'
Plug 'Valloric/MatchTagAlways'
Plug 'tpope/vim-fugitive'                                          " git related commands
" Plug 'airblade/vim-gitgutter'                                      " shows git signs next to line numbers
Plug 'dominikduda/vim_current_word', { 'branch': 'development' }                                " highlight word under cursor
Plug 'AndrewRadev/splitjoin.vim'                                   " split to multiple lines
Plug 'terryma/vim-multiple-cursors'                                " multiple cursors

Plug 'scrooloose/nerdtree'                                         " project explorer
Plug 'jistr/vim-nerdtree-tabs'                                     " better behavior for nerdtree
" Plug 'Xuyuanp/nerdtree-git-plugin'                                 " nerdTree git integration
Plug 'tsony-tsonev/nerdtree-git-plugin'                              " nerdTree git integration
Plug 'simnalamburt/vim-mundo',          { 'on': 'MundoToggle' }    " purview undos

Plug 'jiangmiao/auto-pairs'                                        " auto insert parentheses, quotes etc.
Plug 'tpope/vim-endwise'                                           " auto insert 'end', 'endif' etc.
Plug 'alvan/vim-closetag'                                          " autoclose html tag
Plug 'rhysd/conflict-marker.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }

Plug 'szw/vim-maximizer'                                           " maximize window
Plug 'simeji/winresizer'                                           " window resize helper
Plug 'godlygeek/tabular',               { 'on': 'Tabularize' }     " text align with regexp
Plug 'tpope/vim-abolish'                                           " toggle camelcase, snakecase, etc
Plug 'osyo-manga/vim-anzu'                                         " display amount of search matches
Plug 'tpope/vim-surround'                                          " vim verb for surrounding word

Plug 'junegunn/fzf',                    { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'bartoszmaka/fzf-mru.vim'
Plug 'dyng/ctrlsf.vim'                                             " search projectwide

" syntax
Plug 'HerringtonDarkholme/yats.vim'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'othree/jsdoc-syntax.vim'
Plug 'joker1007/vim-ruby-heredoc-syntax'
Plug 'chrisbra/csv.vim'
Plug 'bartoszmaka/vim-rails',           { 'branch': 'dev' }
" Plug 'tpope/vim-rails'

" fancy tools
Plug 'tpope/vim-bundler',               { 'for': ['ruby', 'eruby'] }
Plug 'tpope/vim-projectionist'
Plug 'bartoszmaka/vim-import-js',       { 'for': ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx'], 'do': 'npm install -g import-js' }
Plug 'meain/vim-package-info',          { 'do': 'npm install' }
Plug 'mattn/emmet-vim'
Plug 'lmeijvogel/vim-yaml-helper',      { 'for': ['yaml'] }

Plug 'w0rp/ale'                                                    " async syntax checking
Plug 'neoclide/coc.nvim',               { 'branch': 'release' }
" Plug 'zxqfl/tabnine-vim'

" new plugins to test
Plug 'dominikduda/vim_yank_with_context'
Plug 'liuchengxu/vista.vim'
call plug#end()

" **********************************
" vim variables
syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
let mapleader="\<Space>"

" Use brew/apt installed python instead of venv or osx default
if has('nvim') && has('mac')
  let g:python_host_prog  = '/usr/local/bin/python2'
  let g:python3_host_prog = '/usr/local/bin/python3'
else
  let g:python_host_prog  = '/usr/bin/python2'
  let g:python3_host_prog = '/usr/bin/python3'
endif

" meta
" syntax sync minlines=500
syntax sync fromstart
set undofile                            " keep history in file
set undodir=$HOME/.vim/undo             " path for this file
set grepprg=ag
set noswapfile
set directory=/tmp
set lazyredraw
set hidden                              " don't close buffers
set wildignore+=
      \*/tmp/*,
      \*/node_modules/*,
      \*/.git/*,
      \*.so,
      \*.swp,
      \*.zipo

" encoding
language en_US.UTF-8
set langmenu=en_US.UTF-8
set fileencoding=utf-8
set encoding=utf8

" behavior
set completeopt=longest,menuone,noinsert,noselect
set backspace=indent,eol,start
set pumheight=15
set spellsuggest=best,8
set signcolumn=yes
set updatetime=300
set shortmess+=crn

" indent
set smartindent

" window management
set scrolloff=4                         " show at least 4 lines above or under cursor
set sidescrolloff=15
set splitright                          " place new vertical split on right side of current window
set splitbelow                          " place new horizontal split under current window
set diffopt+=vertical,iwhiteall

" tabulator
set softtabstop=2
set shiftwidth=2                        " default tab width
set expandtab                           " Spaces instead of tabs

" line length
set synmaxcol=350                       " disable syntax colors after given column
set colorcolumn=81                      " color nth column
set showbreak=\/_
set nowrap                              " don't wrap lines

" searching
set ignorecase
set smartcase

" ui
set noshowmode                          " do not display current mode in cmdline (airline already handles it)
set listchars=
      \eol:$,
      \tab:>-,
      \trail:~,
      \extends:>,
      \precedes:<
set list                                " show whitespaces
set mouse=a
set showcmd                             " show pressed keys
set number                              " show line numbers
set cursorline
set cmdheight=1
set inccommand=nosplit                  " Preview replace
" **********************************

" custom functions
function! GenerateRubyTags()
  call system('ctags -R --languages=ruby --exclude=.git --exclude=log . $(bundle list --paths) -f .tags')
endfunction
command! GenerateRubyTags call GenerateRubyTags()

function! DebugHighlight()
  let l:s = synID(line('.'), col('.'), 1)
  echomsg "hi<"
        \ . synIDattr(synID(line("."),col("."),1),"name")
        \ . '> trans<'
        \ . synIDattr(synID(line("."),col("."),0),"name")
        \ . "> lo<"
        \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name")
        \ . ">"
endfun
nnoremap <F10> :call DebugHighlight()<CR>

function! CocGitBlame() abort
  let l:blame = get(b:, 'coc_git_blame', '')
  if l:blame == '' | return '' | endif

  let l:result = get(split(l:blame, ')'), '')
  return trim(l:result, '()')
endfunction

function! CocGitStatus() abort
  if len(get(b:, 'coc_git_status', '')) > 0
    return ''. b:coc_git_status
  else
    return ''. ' clean'
  endif
endfunction

function! NearestMethodOrFunction() abort
  return get(b:, 'coc_current_function', '')
endfunction

function! GetCocStatus() abort
  return coc#status()
endfunction

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

function! Multiple_cursors_before()
  let g:matchup_matchparen_enabled = 0
endfunction

function! Multiple_cursors_after()
  let g:matchup_matchparen_enabled = 1
endfunction

function! DisableAllHeavyStuff()
  setlocal syntax=off
  setlocal nospell
  ALEDisable
  CocDisable
endfunction

function! NearestMethodOrFunctionVista() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction

" **********************************

" Plugin variables
" related with enabling italic text
" let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
" let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"

if (has("termguicolors"))
  set termguicolors
endif

colorscheme onedark
let g:airline_theme = 'onedark'
set fillchars+=stl:\ ,stlnc:\ ,vert:\│

" **********************************
" plugin variables

let g:loaded_matchit = 1

" airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" 
call airline#parts#define_function('gitStatus', 'CocGitStatus')
call airline#parts#define_minwidth('gitStatus', 50)
call airline#parts#define_accent('gitStatus', 'none')
call airline#parts#define_function('gitBlame', 'CocGitBlame')
call airline#parts#define_minwidth('gitBlame', 120)
call airline#parts#define_accent('gitBlame', 'italic')
call airline#parts#define_function('nearestFunction', 'NearestMethodOrFunction')
call airline#parts#define_minwidth('nearestFunction', 50)
call airline#parts#define_function('cocStatus', 'GetCocStatus')
call airline#parts#define_minwidth('cocStatus', 150)
let g:webdevicons_enable_nerdtree = 0
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#left_sep            = ''
let g:airline#extensions#tabline#left_alt_sep        = ''
let g:airline#extensions#tabline#right_sep           = ''
let g:airline#extensions#tabline#right_alt_sep       = ''
let g:airline_left_sep                               = ''
let g:airline_right_sep                              = ''
let g:airline_section_b                              = ''
let g:airline_section_x                              = airline#section#create_right(['gitBlame', 'gitStatus', 'filetype'])
let g:airline_section_c                              = airline#section#create_left(['file', 'nearestFunction', 'cocStatus'])
let g:airline#parts#ffenc#skip_expected_string       = 'utf-8[unix]'
let g:airline#extensions#branch#enabled              = 0
let g:airline#extensions#tabline#enabled             = 1
let g:airline#extensions#tabline#show_tabs           = 0
let g:airline#extensions#tabline#show_close_button   = 0
let g:airline#extensions#tabline#tab_nr_type         = 2
let g:airline_symbols.linenr                         = ''
let g:airline_symbols.maxlinenr                      = ''
let g:airline_symbols.readonly                       = '🔒'
let g:airline_symbols.spell                          = 'Ꞩ'
let g:airline_symbols.whitespace                     = 'Ξ'
let g:airline#extensions#anzu#enabled                = 0
let g:airline#extensions#tabline#buffer_idx_mode     = 1
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '' : 'S',
      \ 't'  : 'T',
      \ }
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
noremap <M-}>               :bnext<CR>
noremap <M-{>               :bprevious<CR>
noremap <leader>]           :bnext<CR>
noremap <leader>[           :bprevious<CR>
nnoremap <silent> <leader>w :bp<bar>sp<bar>bn<bar>bd<CR>
nnoremap <silent> <leader>W :bp<bar>sp<bar>bn<bar>bd!<CR>
noremap <leader><space>!    :bdelete!<CR>
nnoremap <leader>q          :close<CR>

" anzu
let g:anzu_status_format                             = "%#Search#▶%p◀ (%i/%l)"
nmap n <Plug>(anzu-n-with-echo)zz<Plug>(anzu-echo-search-status)
nmap N <Plug>(anzu-N-with-echo)zz<Plug>(anzu-echo-search-status)
nmap * <Plug>(anzu-star-with-echo)zz<Plug>(anzu-echo-search-status)
nmap # <Plug>(anzu-sharp-with-echo)zz<Plug>(anzu-echo-search-status)

" coc
let g:coc_global_extensions = [
      \ 'coc-tsserver',
      \ 'coc-solargraph',
      \ 'coc-snippets',
      \ 'coc-css',
      \ 'coc-tailwindcss',
      \ 'coc-pyls',
      \ 'coc-elixir',
      \ 'coc-html',
      \ 'coc-json',
      \ 'coc-vimlsp',
      \ 'coc-sql',
      \ 'coc-syntax',
      \ 'coc-yaml',
      \ 'coc-emmet',
      \ 'coc-word',
      \ 'coc-highlight',
      \ 'coc-yank',
      \ 'coc-git',
      \ 'coc-marketplace',
      \ ]
inoremap <expr><TAB>   pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
inoremap <expr><C-j>   pumvisible() ? "\<C-n>" : coc#refresh()
inoremap <expr><C-k>   pumvisible() ? "\<C-p>" : coc#refresh()

vmap <C-e> <Plug>(coc-snippets-select)
" let g:coc_snippet_next = '<c-j>'
" let g:coc_snippet_prev = '<c-k>'
let g:coc_snippet_next = '<tab>'
let g:coc_snippet_prev = '<s-tab>'
imap <expr><C-e>
      \ coc#expandableOrJumpable() ?
      \ "\<Plug>(coc-snippets-expand-jump)" :
      \ "\<C-y>,"
inoremap <expr> <c-space> coc#refresh()

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? coc#_select_confirm() :
"       \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


nnoremap <leader>K :call <SID>show_documentation()<CR>

function! UnifiedJumpToDefinition()
  if CocAction('jumpDefinition') == v:true
    echomsg 'coc'
  else
    echomsg 'find'
    execute "normal gf"
  endif
endfunction

nmap gd :call UnifiedJumpToDefinition()<CR>
" nmap gd <Plug>(coc-definition)
nmap gr <Plug>(coc-references)

nmap <C-l><C-r> <Plug>(coc-references)
vmap <C-l><C-f> <Plug>(coc-format-selected)
nmap <C-l><C-f> <Plug>(coc-format-selected)
xmap <C-l><C-a> <Plug>(coc-codeaction-selected)
vmap <C-l><C-a> <Plug>(coc-codeaction-selected)
nmap <C-l><C-a> <Plug>(coc-codeaction)
nmap <C-l><C-l> :CocList<CR>
nmap <C-l><C-e> :CocList diagnostics<CR>
nmap <C-l><C-m> :CocCommand<CR>
nmap <leader>E  <Plug>(coc-diagnostic-info)
nmap <leader>H  <Plug>(coc-float-hide)
nmap <leader>J  <Plug>(coc-float-jump)

" coc-git
nmap [g <Plug>(coc-git-prevchunk)
nmap ]g <Plug>(coc-git-nextchunk)
nmap gs <Plug>(coc-git-chunkinfo)

" jsxpretty
let g:vim_jsx_pretty_colorful_config = 1

" nerdtree
highlight! NERDTreeOpenable ctermfg=132 guifg=#D19A66
highlight! def link NERDTreeClosable NERDTreeOpenable
let g:NERDTreeWinSize                   = 36
let g:NERDTreeMinimalUI                 = 1
let g:NERDTreeStatusline                = ""
let g:NERDTreeGitStatusNodeColorization = 1
let g:NERDTreeGitStatusWithFlags        = 0
let g:NERDTreeDirArrowExpandable        = ''
let g:NERDTreeDirArrowCollapsible       = ''
let g:NERDTreeColorMapCustom = {
      \ "Dirty"     : "#299999",
      \ "Modified"  : "#CC6666",
      \ "Untracked" : "#CC6666",
      \ "Staged"    : "#29DD29",
      \ "Clean"     : "#00FF00",
      \ "Ignored"   : "#AAAAAA"
      \ }

" mundo
let g:mundo_right = 1

" conflict marker
let g:conflict_marker_enable_mappings = 0

" winresizer
let g:winresizer_vert_resize    = 1
let g:winresizer_horiz_resize   = 1
let g:winresizer_start_key      = '<C-w>e'

" maximizer
let g:maximizer_default_mapping_key = '<C-w>m'

" vimcurrentword
let g:vim_current_word#enabled                          = 1
let g:vim_current_word#highlight_only_in_focused_window = 1
let g:vim_current_word#highlight_twins                  = 1
let g:vim_current_word#highlight_current_word           = 1
" let g:vim_current_word#delay_highlight                  = 1
let g:vim_current_word#highlight_delay                  = 200

" easymotion
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

map ; <Plug>(easymotion-prefix)
" nmap ;w <Plug>(easymotion-w)
" nmap ;e <Plug>(easymotion-e)
" nmap ;b <Plug>(easymotion-b)

" MatchTagAlways
let g:mta_use_matchparen_group       = 0
let g:mta_set_default_matchtag_color = 0
let g:mta_filetypes = {
      \ 'html' : 1,
      \ 'xhtml' : 1,
      \ 'xml' : 1,
      \ 'eruby' : 1,
      \ 'javascript.jsx' : 1,
      \ 'html.handlebars' : 1,
      \}
nnoremap <leader>% :MtaJumpToOtherTag<CR>

let g:AutoClosePreserveDotReg = 0

" autopairs
let g:AutoPairsShortcutToggle     = ''
let g:AutoPairsShortcutBackInsert = ''
let g:AutoPairsShortcutJump       = ''
let g:AutoPairsShortcutFastWrap   = ''
let g:AutoPairsMapCh              = ''
let g:AutoPairs = {
      \ '(':')',
      \ '[':']',
      \ '{':'}',
      \ "'":"'",
      \ '"':'"',
      \ "`":"`",
      \ '```':'```',
      \ '"""':'"""',
      \ "'''":"'''",
      \ "|":"|",
      \ "<%#":"%>",
      \ "<%=":"%>",
      \ "<%":"%>"
      \ }

" closetag
let g:closetag_filenames               = '*.html,*.xhtml,*.phtml,*.js,*.jsx,*.erb,*.eex,*.hbs,*.ts,*.tsx'
let g:closetag_xhtml_filenames         = '*.xhtml,*.jsx,*.js,*.erb,*.eex,*.ts,*.tsx'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_shortcut                = '>'

" matchup
let g:matchup_matchparen_status_offscreen   = 1
let g:matchup_matchparen_deferred           = 1
let g:matchup_matchparen_hi_surround_always = 1
let g:matchup_transmute_enabled             = 0

" polyglot

" splitjoin
let g:splitjoin_split_mapping     = ''
let g:splitjoin_join_mapping      = ''
let g:splitjoin_ruby_curly_braces = 0
let g:splitjoin_ruby_hanging_args = 0
nnoremap <C-m><C-j> :SplitjoinJoin<cr>
nnoremap <C-m><C-s> :SplitjoinSplit<cr>

" multiplecursors
let g:multi_cursor_exit_from_insert_mode = 0
nnoremap <C-m><C-n> :MultipleCursorsFind 
vnoremap <C-m><C-n> :MultipleCursorsFind 

" ctrlsf
let g:ctrlsf_context = '-B 2 -A 2'
let g:ctrlsf_indent = 2
let g:ctrlsf_winsize = '80'
nmap <leader>f <Plug>CtrlSFPrompt
vmap <leader>f <Plug>CtrlSFVwordPath
vmap <leader>F <Plug>CtrlSFVwordExec
nmap <leader>F <Plug>CtrlSFCwordPath
nmap <leader>G <Plug>CtrlSFPwordPath

" projectionist
let g:projectionist_heuristics = {
      \   '*': {
      \     '*.js': {
      \       'alternate': '{dirname}/__tests__/{basename}.test.js',
      \       'type': 'source'
      \     },
      \     '**/__tests__/*.test.js': {
      \       'alternate': '{dirname}/{basename}.js',
      \       'type': 'test'
      \     },
      \     '*.ts': {
      \       'alternate': '{dirname}/__tests__/{basename}.test.ts',
      \       'type': 'source'
      \     },
      \     '**/__tests__/*.test.ts': {
      \       'alternate': '{dirname}/{basename}.ts',
      \       'type': 'test'
      \     },
      \     'app/javascript/components/*.tsx': {
      \       'alternate': 'spec/javascript/{dirname}/{basename}.spec.tsx',
      \       'type': 'source'
      \     },
      \     'spec/javascript/*.spec.tsx': {
      \       'alternate': 'app/javascript/components/{dirname}/{basename}.tsx',
      \       'type': 'test'
      \     },
      \     '*.tsx': {
      \       'alternate': '{dirname}/__tests__/{basename}.spec.tsx',
      \       'type': 'source'
      \     },
      \     '**/__tests__/*.test.tsx': {
      \       'alternate': '{dirname}/{basename}.tsx',
      \       'type': 'test'
      \     },
      \     'app/*.rb': {
      \       'alternate': 'spec/{}_spec.rb',
      \       'type': 'source'
      \     },
      \     'spec/*_spec.rb': {
      \       'alternate': 'app/{}.rb',
      \       'type': 'test'
      \     },
      \     'app/controllers/*_controller.rb': {
      \       'alternate': 'spec/requests/{}_spec.rb',
      \       'type': 'test'
      \     },
      \     'spec/requests/*_spec.rb': {
      \       'alternate': 'app/controllers/{}_controller.rb',
      \       'type': 'test'
      \     }
      \   }
      \ }
nnoremap <leader>a :A<CR>
" nnoremap <leader>e :R<CR>
nnoremap <leader>ev :Eview<CR>
nnoremap <leader>ec :Econtroller<CR>

" importjs
let g:importjs_disable_default_mappings = 1

" ale
let g:ale_virtualtext_cursor   = 1
let g:ale_virtualtext_delay    = 100
let g:ale_echo_msg_error_str   = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format      = '[%linter%] %s [%severity%]'
let g:ale_sign_error           = '🚨'
let g:ale_sign_warning         = '🤔'
let g:ale_lint_on_save         = 1
let g:ale_lint_on_text_changed = 'normal'
let g:ale_sign_column_always   = 1
let g:ale_set_highlights       = 1
let g:ale_fixers = {
      \ 'eruby':          ['remove_trailing_lines', 'trim_whitespace', 'rubocop'],
      \ 'ruby':           ['remove_trailing_lines', 'trim_whitespace', 'rubocop'],
      \ 'javascript':     ['eslint', 'importjs'],
      \ 'javascript.jsx': ['eslint', 'importjs'],
      \ 'vim':            ['remove_trailing_lines', 'trim_whitespace'],
      \ 'json':           ['jq'],
      \ 'python':         ['yapf'],
      \}
let g:ale_linters = {
      \ 'ruby':           ['rubocop'],
      \ 'eruby':          ['rubocop'],
      \ 'javascript':     ['eslint'],
      \ 'json':           ['jq'],
      \ 'python':         ['pyls', 'autopep8', 'yapf'],
      \}
let g:ale_linter_aliases = {'jsx': 'css'}
nnoremap <C-m><C-f> :ALEFix<CR>
nnoremap <C-m><C-l> :ALELint<CR>
nnoremap <C-m><C-w> :set list!<CR>
nnoremap [e :ALEPreviousWrap<CR>
nnoremap ]e :ALENextWrap<CR>

" fzf
let $FZF_DEFAULT_OPTS='--layout=reverse'
function! FloatingFZF()
  let buf = nvim_create_buf(v:false, v:true)
  call setbufvar(buf, 'number', 'no')

  let height = float2nr(&lines * 0.7)
  let width = float2nr(&columns * 0.9)
  let row = float2nr(&lines * 0.2)
  let col = float2nr((&columns - width) / 2)

  let opts = {
        \ 'relative': 'editor',
        \ 'row': row,
        \ 'col': col,
        \ 'width': width,
        \ 'height':height,
        \ }
  let win =  nvim_open_win(buf, v:true, opts)
  call setwinvar(win, '&number', 0)
  call setwinvar(win, '&relativenumber', 0)
endfunction
let g:fzf_layout = { 'window': 'call FloatingFZF()' }

let g:fzf_command_prefix = 'Fzf'
let g:fzf_mru_relative = 1
let g:fzf_colors = {
      \ 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'FZFNormal'],
      \ 'hl':      ['fg', 'Typedef'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Identifier'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'pointer': ['fg', 'Identifier'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment']
      \ }
let g:fzf_action = {
      \ 'ctrl-q': function('s:build_quickfix_list'),
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit'}
command! -bang -nargs=? -complete=dir FZFFilesPreview
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" fix fzf being open in terminal/insert mode randomly after 0.4 update by adding 'a<Bs>'
nnoremap <C-p><C-p> :FZFFilesPreview<CR>a<Bs>
nnoremap <C-p><C-r> :FZFFreshMruPreview<CR>a<Bs>
nnoremap <C-p><C-g> :FzfGitFiles?<CR>a<Bs>
nnoremap <C-p><C-h> :FzfHistory<CR>a<Bs>
nnoremap <C-p><C-b> :FzfBuffers<CR>a<Bs>
nnoremap <C-p><C-f> :FzfRg<CR>a<Bs>
nnoremap <C-p><C-l> :FzfLines<CR>a<Bs>
nnoremap <C-p><C-v> :FzfCommits<CR>a<Bs>
nnoremap <C-p><C-m> :FzfMarks<CR>a<Bs>

" vim-rails
let vim_rails_map_buf_nav_commands = 0

" indentLine
let g:indentLine_fileTypeExclude = ['markdown', 'help']

" vim-repeat
silent! call repeat#set("\<Plug>.", v:count)

" vista
let g:vista_echo_cursor_strategy = 'both'
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#icons = {
      \    'func': "λ",
      \    'function': "λ",
      \    'functions': "λ",
      \    'var': "",
      \    'variable': "",
      \    'variables': "",
      \    'const': "",
      \    'constant': "",
      \    'method': "λ",
      \    'package': "\ue612",
      \    'packages': "\ue612",
      \    'enum': "",
      \    'enumerator': "",
      \    'module': "\uf136",
      \    'modules': "\uf136",
      \    'type': "\uf7fd",
      \    'typedef': "\uf7fd",
      \    'types': "\uf7fd",
      \    'field': "\uf30b",
      \    'fields': "\uf30b",
      \    'macro': "\uf8a3",
      \    'macros': "\uf8a3",
      \    'map': "\ufb44",
      \    'class': "",
      \    'augroup': "\ufb44",
      \    'struct': "\uf318",
      \    'union': "\ufacd",
      \    'member': "\uf02b",
      \    'target': "\uf893",
      \    'property': "",
      \    'interface': "",
      \    'namespace': "::",
      \    'subroutine': "\uf9af",
      \    'implementation': "\uf776",
      \    'typeParameter': "\uf278",
      \    'default': "\uf29c"
      \}
let g:vista_default_executive = 'coc'
let g:vista_finder_alternative_executive = 'ctags'
nnoremap <C-k><C-v> :Vista!!<CR>
nnoremap <C-p><C-s> :Vista finder coc<CR>

" tabular
vnoremap <C-m><C-t> :Tabularize /

nnoremap <C-k><C-u> :MundoToggle<CR>
nnoremap <C-k><C-d> :NERDTreeFind<CR>zz
nnoremap <C-k><C-e> :NERDTreeToggle<CR>
nnoremap <C-k><C-f> :CtrlSFToggle<CR>
nnoremap <C-g><C-b> :Gblame<CR>
nnoremap <C-g><C-d> :Gdiff<CR>
vnoremap <C-m><C-s> :sort<CR>
inoremap jk <esc>
nnoremap K 5k
nnoremap J 5j
" exit terminal mode
tnoremap <leader><esc> <C-\><C-n>
" jump to last opened file (map to ` as well, since new macbooks do not have physical escape key)
nnoremap <leader>` :e#<CR>
nnoremap <leader><esc> :e#<CR>
" search exact match by default
nnoremap / /\V
nnoremap ? /
" disable highlight on del
nnoremap <Bs> :noh<CR>
nnoremap <C-]> g]
nnoremap g] <C-]>
vnoremap * y<Esc>/<C-r>"<CR>``
" replace selected word in file
nnoremap <leader>r yiw:%s/\V<C-r>"//g<Left><Left>
vnoremap <leader>r y:%s/\V<C-r>"//g<Left><Left>
nnoremap <leader>R yiw:%s/\V<C-r>"/<C-r>"/g<Left><Left>
vnoremap <leader>R y:%s/\V<C-r>"/<C-r>"/g<Left><Left>
" disable entering Ex-mode with Q
nnoremap Q <NOP>
map q: <NOP>

" vim command line mappings
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <S-Left>
cnoremap <C-f> <S-Right>
cnoremap <C-d> <Delete>
cnoremap <C-g> <C-c>

" split and merge lines
nnoremap <leader>j i<CR><Esc>
nnoremap <leader>k <esc>kJ

" begin and end of line
map <leader>h ^
map <leader>l $

" treat multiline statement as multiple lines
nnoremap j gj
nnoremap k gk

" windows navigation
" for linux
nnoremap <M-h>      <C-w>h
nnoremap <M-j>      <C-w>j
nnoremap <M-k>      <C-w>k
nnoremap <M-l>      <C-w>l
" for iterm (requires 'send hex' config)
nnoremap <C-space>h <C-w>h
nnoremap <C-space>j <C-w>j
nnoremap <C-space>k <C-w>k
nnoremap <C-space>l <C-w>l
if exists('$TMUX')
  let g:tmux_navigator_no_mappings = 1
  nnoremap <C-w>h :TmuxNavigateLeft<CR>
  nnoremap <C-w>j :TmuxNavigateDown<CR>
  nnoremap <C-w>k :TmuxNavigateUp<CR>
  nnoremap <C-w>l :TmuxNavigateRight<CR>
endif

" always focus after cursor jump
nnoremap <C-o> <C-o>zz
nnoremap <C-i> <C-i>zz
nnoremap gi gi<ESC>zza
nnoremap g; g;zz
nnoremap `` ``zz

" move block of code without losing selection
vnoremap > >gv
vnoremap < <gv
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" system clipboard integration
vnoremap <leader>y "+y
nnoremap <leader>y "+y
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

" sometimes I just hold shift for too long
cabbrev W   w
cabbrev Wa  wa
cabbrev Wq  wq
cabbrev WQ  wq
cabbrev Wqa wqa
cabbrev WQa wqa
cabbrev Q   q
cabbrev Qa  qa
cabbrev Q!  q
cabbrev Qa! qa

" **********************************

augroup filetype-fixes
  autocmd!
  autocmd BufNewFile,BufReadPost *.rb set filetype=ruby "I have to set filetype explicitly to enable rspec syntax and some features, even if it's already set to ruby for some reason
  autocmd BufNewFile,BufReadPost *.ts,*.tsx set syntax=typescriptreact
  autocmd BufNewFile,BufReadPost .eslintrc set filetype=json
augrou END

" augroups
augroup filetype-scoped-settings
  autocmd!
  " don't hide quotes in JSON keys
  autocmd FileType json syntax region jsonKeyword matchgroup=jsonQuote start=/"/  end=/"\ze[[:blank:]\r\n]*\:/ contained
  autocmd FileType json syntax region jsonString oneline matchgroup=jsonQuote start=/"/  skip=/\\\\\|\\"/  end=/"/ contains=jsonEscape contained
  autocmd FileType json          setlocal conceallevel=2
  autocmd Filetype gitcommit     setlocal colorcolumn=73 spell
  autocmd Filetype nerdtree      setlocal tabstop=2 softtabstop=2 shiftwidth=2 signcolumn=no
  autocmd BufEnter,BufReadPre,BufNewFile *.md setlocal conceallevel=0
  autocmd Filetype ruby nnoremap <buffer> <leader>t :Eview<CR>
augroup END

autocmd FileType vim,tex
      \ let [
      \ b:matchup_matchparen_fallback,
      \ b:matchup_matchparen_enabled]
      \ = [0, 0]
autocmd QuickFixCmdPost wincmd J

augroup disable-syntax-for-huge-files
  autocmd!
  autocmd BufReadPre * if getfsize(@%) > 1000000 | call DisableAllHeavyStuff() | endif
augroup END

augroup remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

augroup color-scheme-tweaks
  autocmd!
  autocmd InsertEnter * set cursorcolumn
  autocmd InsertLeave * set nocursorcolumn
  autocmd InsertEnter * highlight CursorLine   guibg=#512121
  autocmd InsertEnter * highlight CursorLineNR guibg=#512121
  autocmd InsertLeave * highlight CursorLine   guibg=#343D46
  autocmd InsertLeave * highlight CursorLineNR guibg=#343D46

  highlight FZFNormal        guibg=#222222
  highlight CursorColumn     guibg=#512121
  highlight CursorColumnNR   guibg=#512121
  highlight IncSearch        guifg=#FF0000   guibg=NONE    gui=bold
  highlight Search           guifg=#FFFFFF   guibg=NONE    gui=bold
  highlight TabLineSel       guifg=#E5C07B
  highlight MatchTag         guibg=#4d4d4d   gui=bold
  highlight MatchWord        guibg=#343D46   gui=italic,bold

  highlight CurrentWordTwins guibg=#363636   gui=bold
  highlight CurrentWord      guibg=#222200   gui=bold

  highlight ALEWarning       guibg=#443333
  highlight ALEError         guibg=#512121

  highlight link CocErrorHighlight AleError
  highlight link CocWarningHighlight AleWarning

  highlight! CocErrorFloat guifg=#bbbbbb
  highlight! CocWarningFloat guifg=#bbbbbb
  highlight! CocInfoFloat guifg=#bbbbbb
  highlight! CocHintFloat guifg=#bbbbbb

  highlight Comment          gui=italic
  highlight link typescriptStorageClass typescriptReserved

  highlight DiffChange  guibg=#3c3c34 guifg=NONE gui=NONE
  highlight DiffText    guibg=#525200 guifg=NONE gui=NONE
  highlight DiffAdd     guibg=#283c34 guifg=NONE gui=NONE
  highlight DiffDelete  guibg=#382c34 guifg=NONE gui=NONE

  " typesctipt / yats tweak
  " highlight htmlTag     ctermfg=59 gui=italic guifg=#5C6370
  autocmd FileType typescript highlight! link htmlTag Comment

  " javascript tweaks
  autocmd FileType javascript highlight! link jsStorageClass jsThis
  autocmd FileType javascript highlight! link jsClassKeyword jsThis

augroup END

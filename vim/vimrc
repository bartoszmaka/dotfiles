filetype off
call plug#begin()
Plug 'Yggdroot/indentLine'                                         " display indent guides
Plug 'joshdick/onedark.vim'                                        " colorscheme
Plug 'bling/vim-airline'                                           " UI improvement
Plug 'vim-airline/vim-airline-themes'                              " themes for airline
Plug 'tpope/vim-commentary'                                        " change selected code into comment
Plug 'tpope/vim-repeat'                                            " better .
Plug 'easymotion/vim-easymotion'                                   " adds improved w e b j k
Plug 'rhysd/clever-f.vim'                                          " better f F

if exists('$TMUX')
  Plug 'christoomey/vim-tmux-navigator'                            " move between vim windows and tmux panes with the same mapping
  Plug 'christoomey/vim-tmux-runner'                               " run tests in other tmux pane
  Plug 'roxma/vim-tmux-clipboard'                                  " sync with tmux clipboard
endif

Plug 'andymass/vim-matchup'                                        " jump to matching tag/parentheses; first suspect in case of performance issues
Plug 'tpope/vim-fugitive'                                          " git related commands
Plug 'dominikduda/vim_current_word'                                " highlight word under cursor
Plug 'AndrewRadev/splitjoin.vim'                                   " split to multiple lines
Plug 'terryma/vim-multiple-cursors'                                " multiple cursors

Plug 'scrooloose/nerdtree', { 'commit': '29a321d' }                                         " project explorer
Plug 'jistr/vim-nerdtree-tabs', { 'commit': '07d19f0' }                                     " better behavior for nerdtree
" Plug 'Xuyuanp/nerdtree-git-plugin'                               " nerdTree git integration
Plug 'tsony-tsonev/nerdtree-git-plugin', { 'commit': 'df08fff' }                            " nerdTree git integration fork with git based colors
Plug 'simnalamburt/vim-mundo',          { 'on': 'MundoToggle' }    " purview undos

Plug 'jiangmiao/auto-pairs'                                        " auto insert parentheses, quotes etc.
Plug 'tpope/vim-endwise'                                           " auto insert 'end', 'endif' etc.
Plug 'alvan/vim-closetag'                                          " autoclose html tag
Plug 'rhysd/conflict-marker.vim'
Plug 'suan/vim-instant-markdown',       {'for': 'markdown', 'do': 'npm install -g instant-markdown-d'}

Plug 'szw/vim-maximizer'                                           " maximize window
Plug 'simeji/winresizer'                                           " window resize helper
Plug 'godlygeek/tabular',               { 'on': 'Tabularize' }     " text align with regexp
Plug 'tpope/vim-abolish'                                           " toggle camelcase, snakecase, etc
Plug 'osyo-manga/vim-anzu'                                         " display amount of search matches
Plug 'tpope/vim-surround'                                          " vim verb for surrounding word

Plug 'junegunn/fzf',                    { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'bartoszmaka/fzf-mru.vim'
Plug 'dyng/ctrlsf.vim'                                             " search projectwide
Plug 'blueyed/vim-diminactive'
Plug 'terryma/vim-expand-region'

" syntax
Plug 'HerringtonDarkholme/yats.vim'
Plug 'tpope/vim-cucumber'
Plug 'othree/jsdoc-syntax.vim'
Plug 'joker1007/vim-ruby-heredoc-syntax'

Plug 'chrisbra/csv.vim'
Plug 'bartoszmaka/vim-rails',           { 'branch': 'dev' }
" Plug 'tpope/vim-rails'
Plug 'sheerun/vim-polyglot'
" Plug 'posva/vim-vue'

" fancy tools
Plug 'dominikduda/vim_yank_with_context'
Plug 'liuchengxu/vista.vim'
Plug 'janko/vim-test'
Plug 'tpope/vim-bundler',               { 'for': ['ruby', 'eruby'] }
Plug 'tpope/vim-rbenv'
Plug 'tpope/gem-ctags'
Plug 'tpope/vim-projectionist'
Plug 'bartoszmaka/vim-import-js',       { 'for': ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx'], 'do': 'npm install -g import-js' }
Plug 'meain/vim-package-info',          { 'do': 'npm install' }
Plug 'mattn/emmet-vim'
Plug 'lmeijvogel/vim-yaml-helper',      { 'for': ['yaml'] }
Plug 'MattesGroeger/vim-bookmarks'
" Plug 'ludovicchabant/vim-gutentags'
" Plug 'camspiers/lens.vim'
" Plug 'camspiers/animate.vim'
" Plug 'wellle/context.vim'

" Plug 'mg979/vim-xtabline'
Plug 'vim-scripts/TagHighlight'
Plug 'w0rp/ale'                                                    " async syntax checking
Plug 'neoclide/coc.nvim',               { 'branch': 'release' }
" Plug 'junegunn/vader.vim'                                          " vimscript testing lib
" new plugins to test
Plug 'Asheq/close-buffers.vim'
Plug 'dunckr/js_alternate.vim'
Plug 'luochen1990/rainbow'
Plug 'jparise/vim-graphql'
Plug 'voldikss/vim-floaterm'
" Plug 'gillyb/stable-windows'
Plug 'Lenovsky/nuake'
" Plug 'vimwiki/vimwiki'
call plug#end()

" **********************************
" vim variables
syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
let mapleader="\<Space>"

" Use brew/apt installed python instead of venv or osx default
if has('nvim') && has('mac')
  let g:python_host_prog  = '/usr/local/bin/python2'
  let g:python3_host_prog = '/usr/local/bin/python3'
else
  let g:python_host_prog  = '/usr/bin/python2'
  let g:python3_host_prog = '/usr/bin/python3'
endif

" meta
" syntax sync minlines=500
syntax sync fromstart
set undofile                            " keep history in file
set undodir=$HOME/.vim/undo             " path for this file
set grepprg=ag
set noswapfile
set directory=/tmp
set lazyredraw
set hidden                              " don't close buffers
set wildignore+=
      \*/tmp/*,
      \*/node_modules/*,
      \*/.git/*,
      \*.so,
      \*.swp,
      \*.zipo

" encoding
language en_US.UTF-8
set langmenu=en_US.UTF-8
set fileencoding=utf-8
set encoding=utf8

" behavior
set completeopt=menuone,noinsert,noselect
set backspace=indent,eol,start
set pumheight=15
set spellsuggest=best,8
set signcolumn=yes
set updatetime=300
set shortmess+=crn

" indent
set smartindent

" window management
set scrolloff=4                         " show at least 4 lines above or under cursor
set sidescrolloff=15
set splitright                          " place new vertical split on right side of current window
set splitbelow                          " place new horizontal split under current window
set diffopt+=vertical,iwhiteall

" tabulator
set softtabstop=2
set shiftwidth=2                        " default tab width
set expandtab                           " Spaces instead of tabs

" line length
set synmaxcol=350                       " disable syntax colors after given column
set colorcolumn=81                      " color nth column
set showbreak=\/_
set nowrap                              " don't wrap lines

" searching
set ignorecase
set smartcase

" ui
set noshowmode                          " do not display current mode in cmdline (airline already handles it)
set listchars=
      \eol:$,
      \tab:>-,
      \trail:~,
      \extends:>,
      \precedes:<
set list                                " show whitespaces
set mouse=a
set showcmd                             " show pressed keys
set number                              " show line numbers
set cursorline
set cmdheight=1
set inccommand=nosplit                  " Preview replace
" **********************************

" custom functions
function! GenerateRubyTags()
  call system('ctags -f tags -R --output-format=u-ctags --languages=ruby --exclude=.git --exclude=log . $(bundle list --paths)')
endfunction
command! GenerateRubyTags call GenerateRubyTags()

function! DebugHighlight()
  let l:s = synID(line('.'), col('.'), 1)
  let name = synIDattr(synID(line("."),col("."),1),"name")

  echomsg string(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'))
  echomsg "hi<"
        \ . synIDattr(synID(line("."),col("."),1),"name")
        \ . '> trans<'
        \ . synIDattr(synID(line("."),col("."),0),"name")
        \ . "> lo<"
        \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name")
        \ . ">"
  echomsg '==========='
  exe 'syntax list ' . name
endfun
nnoremap <F8> :call DebugHighlight()<CR>
nnoremap <F9> :syntax sync fromstart<CR>
nnoremap <F5> :CocCommand snippets.openSnippetFiles<CR>

function! CocGitBlame() abort
  let l:blame = get(b:, 'coc_git_blame', '')
  if l:blame == '' | return '' | endif

  let l:result = get(split(l:blame, ')'), '')
  return trim(l:result, '()')
endfunction

function! CocGitStatus() abort
  if len(get(b:, 'coc_git_status', '')) > 0
    return ''. b:coc_git_status
  else
    return ''. ' clean'
  endif
endfunction

function! NearestMethodOrFunction() abort
  return get(b:, 'coc_current_function', '')
endfunction

function! GetCocStatus() abort
  return coc#status()
endfunction

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

function! Multiple_cursors_before()
  let g:matchup_matchparen_enabled = 0
endfunction

function! Multiple_cursors_after()
  let g:matchup_matchparen_enabled = 1
endfunction

function! DisableAllHeavyStuff()
  setlocal syntax=off
  setlocal nospell
  ALEDisable
  CocDisable
endfunction

function! NearestMethodOrFunctionVista() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction

" **********************************

if (has("termguicolors"))
  set termguicolors
endif

" let g:onedark_color_overrides = {
" \ "black": {"gui": "#1a1a1a", "cterm": "235", "cterm16": "0" },
" \}
colorscheme onedark
let g:airline_theme = 'onedark'
set fillchars+=stl:\ ,stlnc:\ ,vert:\│

" **********************************
" plugin variables

" let g:gutentags_trace = 1
let g:loaded_matchit = 1

" airline
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" 
call airline#parts#define_function('gitStatus', 'CocGitStatus')
call airline#parts#define_minwidth('gitStatus', 50)
call airline#parts#define_accent('gitStatus', 'none')
call airline#parts#define_function('gitBlame', 'CocGitBlame')
call airline#parts#define_minwidth('gitBlame', 120)
call airline#parts#define_accent('gitBlame', 'italic')
call airline#parts#define_function('nearestFunction', 'NearestMethodOrFunction')
call airline#parts#define_minwidth('nearestFunction', 50)
call airline#parts#define_function('cocStatus', 'GetCocStatus')
call airline#parts#define_minwidth('cocStatus', 150)

let g:airline#extensions#whitespace#enabled          = 0
let g:airline#extensions#branch#enabled              = 0
let g:airline#extensions#tabline#enabled             = 1
let g:airline#extensions#anzu#enabled                = 0
let airline#extensions#ale#show_line_numbers         = 0
let g:airline#extensions#tabline#left_sep            = ''
let g:airline#extensions#tabline#left_alt_sep        = ''
let g:airline#extensions#tabline#right_sep           = ''
let g:airline#extensions#tabline#right_alt_sep       = ''
let g:airline#extensions#tabline#show_tabs           = 0
let g:airline#extensions#tabline#show_close_button   = 0
let g:airline#extensions#tabline#tab_nr_type         = 2
let g:airline#extensions#tabline#buffer_idx_mode     = 1
let g:airline_left_sep                               = ''
let g:airline_right_sep                              = ''
let g:airline_section_b                              = ''
let g:airline_section_x                              = airline#section#create_right(['gitBlame', 'gitStatus', 'filetype'])
let g:airline_section_c                              = airline#section#create_left(['file', 'nearestFunction', 'cocStatus'])
let g:airline_section_z                              = '%3l/%L:%3v'
let g:airline#parts#ffenc#skip_expected_string       = 'utf-8[unix]'
let g:airline_symbols.linenr                         = ''
let g:airline_symbols.maxlinenr                      = ''
let g:airline_symbols.readonly                       = '🔒'
let g:airline_symbols.spell                          = 'S'
let g:airline_symbols.whitespace                     = 'Ξ'

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
" noremap <M-}>               :bnext<CR>
" noremap <M-{>               :bprevious<CR>
" noremap <m-]>               :bnext<CR>
" noremap <m-[>               :bprevious<CR>
noremap <leader>]           :bnext<CR>
noremap <leader>[           :bprevious<CR>
noremap <leader>}           :bnext<CR>
noremap <leader>{           :bprevious<CR>
nnoremap <silent> <leader>w :bp<bar>sp<bar>bn<bar>bd<CR>:Bdelete nameless<CR>
nnoremap <silent> <leader>W :bp<bar>sp<bar>bn<bar>bd!<CR>:Bdelete nameless<CR>
nnoremap <silent> <leader><leader>W :Bdelete hidden<CR>
noremap <leader><space>!    :bdelete!<CR>
nnoremap <leader>q          :close<CR>

" anzu
let g:anzu_status_format                             = "%#Search#▶%p◀ (%i/%l)"
nmap n <Plug>(anzu-n-with-echo)zz<Plug>(anzu-echo-search-status)
nmap N <Plug>(anzu-N-with-echo)zz<Plug>(anzu-echo-search-status)
nmap * <Plug>(anzu-star-with-echo)zz<Plug>(anzu-echo-search-status)
nmap # <Plug>(anzu-sharp-with-echo)zz<Plug>(anzu-echo-search-status)

" coc
let g:coc_global_extensions = [
      \ 'coc-tsserver',
      \ 'coc-vetur',
      \ 'coc-tag',
      \ 'coc-solargraph',
      \ 'coc-snippets',
      \ 'coc-emmet',
      \ 'coc-css',
      \ 'coc-tailwindcss',
      \ 'coc-pyls',
      \ 'coc-elixir',
      \ 'coc-html',
      \ 'coc-json',
      \ 'coc-vimlsp',
      \ 'coc-syntax',
      \ 'coc-yaml',
      \ 'coc-word',
      \ 'coc-highlight',
      \ 'coc-yank',
      \ 'coc-git',
      \ 'coc-marketplace',
      \ ]

" autocomplete
function! UnifiedJumpToDefinition()
  if CocAction('jumpDefinition') == v:true
    echomsg 'coc'
  else
    echomsg 'find'
    execute "normal gf"
  endif
endfunction

function! s:isWhitespaceOrNothingBeforeCursor() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'vertical h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

inoremap <expr><TAB>   pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
inoremap <expr><C-j>   pumvisible() ? "\<C-n>" : coc#refresh()
inoremap <expr><C-k>   pumvisible() ? "\<C-p>" : coc#refresh()
vmap <C-e> <Plug>(coc-snippets-select)
let g:coc_snippet_next = '<tab>'
let g:coc_snippet_prev = '<s-tab>'
imap <expr><C-e>
      \ coc#expandableOrJumpable() ?
      \ "\<Plug>(coc-snippets-expand-jump)" :
      \ "\<Plug>(emmet-expand-abbr)"

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>isWhitespaceOrNothingBeforeCursor() ? "\<TAB>" : '\<C-n>'

nnoremap <leader>K :call <SID>show_documentation()<CR>

nmap gd :call UnifiedJumpToDefinition()<CR>
nmap gr <Plug>(coc-references)

nmap <C-l><C-r> <Plug>(coc-references)
vmap <C-l><C-f> <Plug>(coc-format-selected)
nmap <C-l><C-f> <Plug>(coc-format-selected)
xmap <C-l><C-a> <Plug>(coc-codeaction-selected)
vmap <C-l><C-a> <Plug>(coc-codeaction-selected)
nmap <C-l><C-a> <Plug>(coc-codeaction)
nmap <C-l><C-l> :CocList<CR>
nmap <C-l><C-e> :CocList diagnostics<CR>
nmap <C-l><C-m> :CocCommand<CR>
nmap <leader>E  <Plug>(coc-diagnostic-info)
nmap <leader>H  <Plug>(coc-float-hide)
nmap <leader>J  <Plug>(coc-float-jump)

" vim test
let test#strategy = "neovim"
let test#neovim#term_position = "vertical"
let test#ruby#cucumber#executable = 'bundle exec cucumber'
let test#ruby#rspec#executable = 'bundle exec rspec'
" let test#javascript#jest#file_pattern \v(__tests__/.*|(spec|test))\.(js|jsx|coffee|ts|tsx)$
nmap TT :TestNearest<CR>
nmap TF :TestFile<CR>

" coc-git
nmap [g <Plug>(coc-git-prevchunk)
nmap ]g <Plug>(coc-git-nextchunk)
nmap gs <Plug>(coc-git-chunkinfo)

" jsxpretty
let g:vim_jsx_pretty_colorful_config = 1

" nerdtree
highlight! NERDTreeOpenable ctermfg=132 guifg=#D19A66
highlight! def link NERDTreeClosable NERDTreeOpenable
let g:nerdtree_tabs_autoclose=0
let g:NERDTreeWinSize                   = 36
let g:NERDTreeMinimalUI                 = 1
let g:NERDTreeStatusline                = ""
let g:NERDTreeGitStatusNodeColorization = 1
let g:NERDTreeGitStatusWithFlags        = 0
let g:NERDTreeDirArrowExpandable        = ''
let g:NERDTreeDirArrowCollapsible       = ''
let g:NERDTreeColorMapCustom = {
      \ "Dirty"     : "#299999",
      \ "Modified"  : "#CC6666",
      \ "Untracked" : "#CC6666",
      \ "Staged"    : "#29DD29",
      \ "Clean"     : "#00FF00",
      \ "Ignored"   : "#AAAAAA"
      \ }

" mundo
let g:mundo_right = 1

" conflict marker
let g:conflict_marker_enable_mappings = 0

" winresizer
let g:winresizer_vert_resize    = 1
let g:winresizer_horiz_resize   = 1
let g:winresizer_start_key      = '<C-w>e'

" maximizer
let g:maximizer_default_mapping_key = '<C-w>m'

" vimcurrentword
let g:vim_current_word#enabled                          = 1
let g:vim_current_word#highlight_only_in_focused_window = 1
let g:vim_current_word#highlight_twins                  = 1
let g:vim_current_word#highlight_current_word           = 1
let g:vim_current_word#highlight_delay                  = 200

" easymotion
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion

map ; <Plug>(easymotion-prefix)

" " MatchTagAlways
" let g:mta_use_matchparen_group       = 0
" let g:mta_set_default_matchtag_color = 0
" let g:mta_filetypes = {
"       \ 'html' : 1,
"       \ 'xhtml' : 1,
"       \ 'xml' : 1,
"       \ 'eruby' : 1,
"       \ 'javascript.jsx' : 1,
"       \ 'html.handlebars' : 1,
"       \}
" nnoremap <leader>% :MtaJumpToOtherTag<CR>

let g:AutoClosePreserveDotReg = 0

" autopairs
let g:AutoPairsShortcutToggle     = ''
let g:AutoPairsShortcutBackInsert = ''
let g:AutoPairsShortcutJump       = ''
let g:AutoPairsShortcutFastWrap   = ''
let g:AutoPairsMapCh              = ''
let g:AutoPairs = {
      \ '(':')',
      \ '[':']',
      \ '{':'}',
      \ "'":"'",
      \ '"':'"',
      \ "`":"`",
      \ '```':'```',
      \ '"""':'"""',
      \ "'''":"'''",
      \ "|":"|",
      \ "<%#":"%>",
      \ "<%=":"%>",
      \ "<%":"%>",
      \ }

" closetag
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.erb,*.jsx,*.js,*.vue"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.erb,*.js,*.vue'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_shortcut = '>'

" matchup
let g:matchup_matchparen_offscreen          = {'method': 'popup'}
let g:matchup_matchparen_deferred           = 1
let g:matchup_matchparen_hi_surround_always = 1
let g:matchup_matchparen_timeout            = 100
let g:matchup_matchparen_deferred           = 1

" splitjoin
let g:splitjoin_split_mapping     = ''
let g:splitjoin_join_mapping      = ''
let g:splitjoin_ruby_curly_braces = 0
let g:splitjoin_ruby_hanging_args = 0
nmap <C-m><C-d> :SplitjoinJoin<cr>
nmap <C-m><C-s> :SplitjoinSplit<cr>

" multiplecursors
let g:multi_cursor_exit_from_insert_mode = 0
nnoremap <C-m><C-n> :MultipleCursorsFind
vnoremap <C-m><C-n> :MultipleCursorsFind

" ctrlsf
let g:ctrlsf_context = '-B 2 -A 2'
let g:ctrlsf_indent = 2
let g:ctrlsf_winsize = '80'
nmap <leader>f <Plug>CtrlSFPrompt
vmap <leader>f <Plug>CtrlSFVwordPath
vmap <leader>F <Plug>CtrlSFVwordExec
nmap <leader>F <Plug>CtrlSFCwordPath
nmap <leader>G <Plug>CtrlSFPwordPath

" projectionist
let g:projectionist_heuristics = {
      \   '*': {
      \     'src/*.vue': {
      \       'alternate': '{}/__tests__/{basename}.test.js',
      \       'type': 'source'
      \     },
      \     'src/*.js': {
      \       'alternate': '{}/__tests__/{basename}.test.js',
      \       'type': 'source'
      \     },
      \     'src/**/__tests__/*.test.js': {
      \       'alternate': '{dirname}/{basename}.js',
      \       'type': 'test'
      \     },
      \     'src/*.ts': {
      \       'alternate': '{}/__tests__/{basename}.test.ts',
      \       'type': 'source'
      \     },
      \     'src/**/__tests__/*.test.ts': {
      \       'alternate': '{dirname}/{basename}.ts',
      \       'type': 'test'
      \     },
      \     'app/*.rb': {
      \       'alternate': 'spec/{}_spec.rb',
      \       'type': 'source'
      \     },
      \     'lib/*.rb': {
      \       'alternate': 'spec/{}_spec.rb',
      \       'type': 'source'
      \     },
      \     'spec/*_spec.rb': {
      \       'alternate': 'app/{}.rb',
      \       'type': 'test'
      \     },
      \     'app/controllers/*_controller.rb': {
      \       'alternate': 'spec/requests/{}_spec.rb',
      \       'type': 'test'
      \     },
      \     'spec/requests/*_spec.rb': {
      \       'alternate': 'app/controllers/{}_controller.rb',
      \       'type': 'test'
      \     }
      \   }
      \ }
nnoremap <leader>a :A<CR>
nnoremap <leader>ev :Eview<CR>
nnoremap <leader>ec :Econtroller<CR>

" importjs
let g:importjs_disable_default_mappings = 1

" ale
let g:ale_virtualtext_cursor   = 1
let g:ale_disable_lsp          = 1
let g:ale_virtualtext_delay    = 1000
let g:ale_echo_msg_error_str   = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format      = '[%linter%] %s [%severity%]'
let g:ale_sign_error           = '🚨'
let g:ale_sign_warning         = '🤔'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
let g:ale_sign_column_always   = 1
let g:ale_set_highlights       = 1
let g:ale_fixers = {
      \ 'eruby':          ['remove_trailing_lines', 'trim_whitespace', 'rubocop'],
      \ 'ruby':           ['remove_trailing_lines', 'trim_whitespace', 'rubocop'],
      \ 'javascript':     ['eslint', 'importjs'],
      \ 'vue':            ['eslint', 'importjs'],
      \ 'javascript.jsx': ['eslint', 'importjs'],
      \ 'typescript':     ['eslint', 'importjs'],
      \ 'typescript.tsx': ['eslint', 'importjs'],
      \ 'vim':            ['remove_trailing_lines', 'trim_whitespace'],
      \ 'json':           ['jq'],
      \ 'python':         ['yapf'],
      \ 'css':            ['stylelint'],
      \ 'sass':           ['stylelint'],
      \ 'scss':           ['stylelint'],
      \}
let g:ale_linters = {
      \ 'ruby':           ['rubocop'],
      \ 'eruby':          ['rubocop'],
      \ 'javascript':     ['eslint'],
      \ 'typescript':     ['eslint'],
      \ 'vue':            ['eslint'],
      \ 'json':           ['jq'],
      \ 'python':         ['pyls', 'autopep8', 'yapf'],
      \ 'css':            ['stylelint'],
      \ 'sass':           ['stylelint'],
      \ 'scss':           ['stylelint'],
      \}
let g:ale_linter_aliases = {'jsx': 'css'}
nnoremap <C-m><C-f> :ALEFix<CR>
nnoremap <C-m><C-l> :ALELint<CR>
nnoremap <C-m><C-w> :set list!<CR>
nnoremap [e :ALEPreviousWrap<CR>
nnoremap ]e :ALENextWrap<CR>

" fzf
let $FZF_DEFAULT_OPTS='--layout=reverse'
function! FloatingFZF()
  let buf = nvim_create_buf(v:false, v:true)
  call setbufvar(buf, 'number', 'no')

  let height = float2nr(&lines * 0.4)
  let width = float2nr(&columns * 0.6)
  let row = float2nr(&lines * 0.2)
  let col = float2nr((&columns - width) / 2)

  let opts = {
        \ 'relative': 'editor',
        \ 'row': row,
        \ 'col': col,
        \ 'width': width,
        \ 'height':height,
        \ }
  let win =  nvim_open_win(buf, v:true, opts)
  call setwinvar(win, '&number', 0)
  call setwinvar(win, '&relativenumber', 0)
endfunction
let g:fzf_layout = { 'window': 'call FloatingFZF()' }

let g:fzf_command_prefix = 'Fzf'
let g:fzf_mru_relative = 1
let g:fzf_colors = {
      \ 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'FZFNormal'],
      \ 'hl':      ['fg', 'Typedef'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Identifier'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'pointer': ['fg', 'Identifier'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment']
      \ }
let g:fzf_action = {
      \ 'ctrl-q': function('s:build_quickfix_list'),
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit'}
command! -bang -nargs=? -complete=dir FZFFilesPreview
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" fix fzf being open in terminal/insert mode randomly after 0.4 update by adding 'a<Bs>'
nnoremap <C-p><C-p> :FZFFilesPreview<CR>a<Bs>
" nnoremap mm         :FZFFilesPreview<CR>a<Bs>
nnoremap <C-p><C-r> :FZFFreshMruPreview<CR>a<Bs>
" nnoremap mr         :FZFFreshMruPreview<CR>a<Bs>
nnoremap <C-p><C-g> :FzfGitFiles?<CR>a<Bs>
nnoremap <C-p><C-h> :FzfHistory<CR>a<Bs>
nnoremap <C-p><C-b> :FzfBuffers<CR>a<Bs>
" nnoremap mb         :FzfBuffers<CR>a<Bs>
nnoremap <C-p><C-f> :FzfRg<CR>a<Bs>
" nnoremap mn         :FzfRg<CR>a<Bs>
nnoremap <C-p><C-l> :FzfBLines<CR>a<Bs>
" nnoremap ml         :FzfLines<CR>a<Bs>
nnoremap <C-p><C-v> :FzfCommits<CR>a<Bs>
" nnoremap mc         :FzfCommits<CR>a<Bs>
nnoremap <C-p><C-m> :FzfMarks<CR>a<Bs>

" vim-rails
let vim_rails_map_buf_nav_commands = 0

" vim-expand-region
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)

" indentLine
let g:indentLine_fileTypeExclude = ['markdown', 'help']

" vim-repeat
silent! call repeat#set("\<Plug>.", v:count)

" vista
let g:vista_echo_cursor_strategy = 'both'
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#icons = {
      \    'func': "λ",
      \    'function': "λ",
      \    'functions': "λ",
      \    'var': "",
      \    'variable': "",
      \    'variables': "",
      \    'const': "",
      \    'constant': "",
      \    'method': "λ",
      \    'package': "\ue612",
      \    'packages': "\ue612",
      \    'enum': "",
      \    'enumerator': "",
      \    'module': "\uf136",
      \    'modules': "\uf136",
      \    'type': "\uf7fd",
      \    'typedef': "\uf7fd",
      \    'types': "\uf7fd",
      \    'field': "\uf30b",
      \    'fields': "\uf30b",
      \    'macro': "\uf8a3",
      \    'macros': "\uf8a3",
      \    'map': "\ufb44",
      \    'class': "",
      \    'augroup': "\ufb44",
      \    'struct': "\uf318",
      \    'union': "\ufacd",
      \    'member': "\uf02b",
      \    'target': "\uf893",
      \    'property': "",
      \    'interface': "",
      \    'namespace': "::",
      \    'subroutine': "\uf9af",
      \    'implementation': "\uf776",
      \    'typeParameter': "\uf278",
      \    'default': "\uf29c"
      \ }
" let g:vista_default_executive = 'coc'
" let g:vista_finder_alternative_executive = 'ctags'
nnoremap <C-k><C-v> :Vista!!<CR>
nnoremap <C-p><C-s> :Vista finder coc<CR>

" tabular
vnoremap <C-m><C-t> :Tabularize /

nnoremap <C-k><C-u> :MundoToggle<CR>
nnoremap <C-k><C-d> :NERDTreeRefreshRoot<CR>:NERDTreeFind<CR>zz
nnoremap <C-k><C-e> :NERDTreeToggle<CR>
nnoremap <C-k><C-f> :CtrlSFToggle<CR>
nnoremap <C-g><C-b> :Gblame<CR>
nnoremap <C-g><C-d> :Gdiffsplit<CR>
vnoremap <C-m><C-s> :sort<CR>
inoremap jk <esc>
nnoremap K 5k
nnoremap J 5j
vnoremap K 5k
vnoremap J 5j

" nuake
let g:nuake_size = 0.3
nnoremap <C-l><C-n> :Nuake<CR>
tnoremap <C-l><C-n> <C-\><C-n>:Nuake<CR>
tnoremap <C-w>h     <C-\><C-n><C-w>h
tnoremap <C-w>j     <C-\><C-n><C-w>j
tnoremap <C-w>k     <C-\><C-n><C-w>k
tnoremap <C-w>l     <C-\><C-n><C-w>l

" exit terminal mode
tnoremap <leader><esc> <C-\><C-n>
" jump to last opened file (map to ` as well, since new macbooks do not have physical escape key)
nnoremap <leader>` :e#<CR>
nnoremap <leader><esc> :e#<CR>
" search exact match by default
nnoremap / /\V
nnoremap ? /
" disable highlight on del
nnoremap <Bs> :noh<CR>
" nnoremap <C-]> g]
" nnoremap g] <C-]>
vnoremap * y<Esc>/<C-r>"<CR>``
" replace selected word in file
nnoremap <leader>r yiw:%s/\V<C-r>"//g<Left><Left>
vnoremap <leader>r y:%s/\V<C-r>"//g<Left><Left>
nnoremap <leader>R yiw:%s/\V<C-r>"/<C-r>"/g<Left><Left>
vnoremap <leader>R y:%s/\V<C-r>"/<C-r>"/g<Left><Left>
" disable entering Ex-mode with Q
nnoremap Q <NOP>
map q: <NOP>

" vim command line mappings
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <S-Left>
cnoremap <C-f> <S-Right>
" cnoremap <C-d> <Delete>
cnoremap <C-g> <C-c>
inoremap <C-a> <Home>
" inoremap <C-e> <End>
nnoremap <C-a> <Home>
nnoremap <C-e> <End>
" vnoremap <C-a> <Home>
" vnoremap <C-e> <End>

" split and merge lines
nnoremap <leader>j i<CR><Esc>
nnoremap <leader>k <esc>kJ

" begin and end of line
map <leader>h ^
map <leader>l $

" treat multiline statement as multiple lines
nnoremap j gj
nnoremap k gk

" windows navigation
" for linux
nnoremap <M-h>      <C-w>h
nnoremap <M-j>      <C-w>j
nnoremap <M-k>      <C-w>k
nnoremap <M-l>      <C-w>l
" for vimr
nnoremap <D-h>      <C-w>h
nnoremap <D-j>      <C-w>j
nnoremap <D-k>      <C-w>k
nnoremap <D-l>      <C-w>l
" for iterm (requires 'send hex' config)
nnoremap <C-space>h <C-w>h
nnoremap <C-space>j <C-w>j
nnoremap <C-space>k <C-w>k
nnoremap <C-space>l <C-w>l

if exists('$TMUX')
  let g:tmux_navigator_no_mappings = 1
  nnoremap <silent><C-w>h :TmuxNavigateLeft<CR>
  nnoremap <silent><C-w>j :TmuxNavigateDown<CR>
  nnoremap <silent><C-w>k :TmuxNavigateUp<CR>
  nnoremap <silent><C-w>l :TmuxNavigateRight<CR>
endif

" always focus after cursor jump
" nnoremap <C-o> <C-o>zz
" nnoremap <C-i> <C-i>zz
nnoremap gi gi<ESC>zza
nnoremap g; g;zz
nnoremap `` ``zz

" move block of code without losing selection
vnoremap > >gv
vnoremap < <gv
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

" system clipboard integration
vnoremap <leader>y "+y
nnoremap <leader>y "+y
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

nnoremap <F13> :w<CR>
nnoremap <F14> :wa<CR>

" sometimes I just hold shift for too long
cabbrev W   w
cabbrev Wa  wa
cabbrev WA  wa
cabbrev Wq  wq
cabbrev WQ  wq
cabbrev Wqa wqa
cabbrev WQa wqa
cabbrev Q   q
cabbrev Qa  qa
cabbrev Q!  q
cabbrev Qa! qa

" **********************************
function! DetectReactFiletype()
  let n = 1
  while n < 10 && n < line("$")
    if getline(n) =~ "react"
      if expand('%:e') == 'js'
        set filetype=javascript.jsx
      elseif expand('%:e') == 'ts'
        set filetype=typescript.tsx
      endif

      return
    endif

    let n = n + 1
  endwhile
endfunction

function! FormatHelpBuffer()
  execute 'normal \<C-w>l'
  execute 'vertical resize 80'
endfunction

augroup filetype_fixes
  autocmd!
 "I have to set filetype explicitly to enable rspec syntax and some features, even if it's already set to ruby for some reason
  autocmd BufNewFile,BufReadPost *.rb set filetype=ruby
  autocmd BufNewFile,BufReadPost *.ts,*.tsx set syntax=typescriptreact
  autocmd BufNewFile,BufReadPost .eslintrc set filetype=json
  autocmd BufNewFile,BufReadPost,BufWritePost *.js,*.ts call DetectReactFiletype()
  autocmd TermEnter * setlocal scrolloff=0
  autocmd TermLeave * setlocal scrolloff=4
  autocmd BufEnter * if &buftype == 'help' | call FormatHelpBuffer() | endif
augrou END

augroup filetype_scoped_settings
  autocmd!
  autocmd FileType json          setlocal conceallevel=2
  autocmd Filetype gitcommit     setlocal colorcolumn=51 spell
  autocmd Filetype nerdtree      setlocal tabstop=2 softtabstop=2 shiftwidth=2 signcolumn=no
  autocmd BufEnter,BufReadPre,BufNewFile *.md setlocal conceallevel=0
  autocmd FileType scss set iskeyword+=-
  autocmd FileType ctrlsf nnoremap <leader>S :CtrlSFUpdate<CR>
  autocmd FileType javascript,typescript,javascript.jsx,typescript.tsx iabbrev <buffer> cosnt const
  autocmd FileType vue setlocal commentstring=\/\*\ %s\ \*\/
augroup END

augroup callbacks
  autocmd!
  autocmd BufReadPost * syntax sync fromstart
augroup END

autocmd FileType vim,tex,log
      \ let [
      \ b:matchup_matchparen_fallback,
      \ b:matchup_matchparen_enabled]
      \ = [0, 0]
autocmd QuickFixCmdPost wincmd J

augroup disable_syntax_for_huge_files
  autocmd!
  autocmd BufReadPre * if getfsize(@%) > 1000000 | call DisableAllHeavyStuff() | endif
augroup END

augroup remember_cursor_position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

augroup syntax_fixes
  " don't hide quotes in JSON keys
  autocmd FileType json syntax region jsonKeyword matchgroup=jsonQuote start=/"/  end=/"\ze[[:blank:]\r\n]*\:/ contained
  autocmd FileType json syntax region jsonString oneline matchgroup=jsonQuote start=/"/  skip=/\\\\\|\\"/  end=/"/ contains=jsonEscape contained

  " fix sass highlighting
  autocmd FileType sass syntax match sassMixinName "@keyframes"

  " fix js weird coloring inside functions in objects like { foo() { /* weird colors here*/ } }
  autocmd FileType javascript syntax clear jsObjectShorthandProp jsObject jsParensError jsParen

  " remove a tag underline
  autocmd FileType vue syntax clear htmlLink htmlH2 " clearing this syntax rule broke style highlighting
  autocmd FileType vue syntax match htmlArg /\<aria-[a-z\-]\+\>/  contained
  " autocmd FileType vue syntax match vueSlotName /\#[a-z]\+/
  " autocmd FileType vue syntax region contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster,vueSlotName
augroup END

augroup color_scheme_tweaks
  autocmd!
  autocmd InsertEnter * setlocal cursorcolumn
  autocmd InsertLeave * setlocal nocursorcolumn
  autocmd InsertEnter * highlight CursorLine   guibg=#512121
  autocmd InsertEnter * highlight CursorLineNR guibg=#512121
  autocmd InsertLeave * highlight CursorLine   guibg=#343D46
  autocmd InsertLeave * highlight CursorLineNR guibg=#343D46

  highlight FZFNormal        guibg=#222222
  highlight CursorColumn     guibg=#512121
  highlight CursorColumnNR   guibg=#512121
  highlight IncSearch        guifg=#FF0000 guibg=NONE gui=bold
  highlight Search           guifg=#FFFFFF guibg=NONE gui=bold
  highlight TabLineSel       guifg=#E5C07B
  highlight MatchTag         guibg=#222200 gui=bold
  highlight MatchWord        guibg=#222200
  highlight MatchParen       guifg=NONE    guibg=NONE gui=reverse
  highlight MatchParenCur    guifg=NONE    guibg=NONE gui=reverse

  highlight CurrentWordTwins guibg=#363636 gui=bold
  highlight CurrentWord      guibg=#222200 gui=bold

  highlight ALEWarning       guibg=#443333
  highlight ALEError         guibg=#512121

  highlight link CocErrorHighlight AleError
  highlight link CocWarningHighlight AleWarning
  highlight link CocInfoHighlight AleWarning
  highlight link CocHintHighlight AleWarning

  highlight! CocErrorFloat guifg=#bbbbbb
  highlight! CocWarningFloat guifg=#bbbbbb
  highlight! CocInfoFloat guifg=#bbbbbb
  highlight! CocHintFloat guifg=#bbbbbb

  highlight Comment          gui=italic

  highlight ctrlsfMatch guibg=#583c34 guifg=NONE gui=NONE

  highlight DiffChange  guibg=#3c3c34 guifg=NONE gui=NONE
  highlight DiffText    guibg=#525200 guifg=NONE gui=NONE
  highlight DiffAdd     guibg=#283c34 guifg=NONE gui=NONE
  highlight DiffDelete  guibg=#382c34 guifg=NONE gui=NONE

  autocmd FileType typescript highlight! link typescriptStorageClass typescriptReserved
  autocmd FileType typescript highlight! link typescriptVariableDeclaration Type
  autocmd FileType typescript highlight! link typescriptClassName typescriptPredefinedType
  autocmd FileType typescript highlight! link typescriptClassHeritage typescriptPredefinedType
  autocmd FileType typescript highlight! link typescriptClassExtends Label
  autocmd FileType typescript highlight! link typescriptClassKeyword Label
  autocmd FileType typescript highlight! link typescriptFuncKeyword Label
  autocmd FileType typescript highlight! link typescriptAmbientDeclaration Label
  autocmd FileType typescript highlight! link typescriptExport Label
  autocmd FileType typescript highlight! link typescriptImport Label
  autocmd FileType typescript highlight! link typescriptArrowFunc Label
  autocmd FileType typescript highlight! link typescriptTypeParameter Type
  autocmd FileType typescript highlight! link typescriptTypeReference Type
  autocmd FileType typescript highlight! link typescriptCall Label

  autocmd FileType javascript highlight! link jsStorageClass Keyword
  autocmd FileType javascript highlight! link jsClassDefinition Type
  autocmd FileType javascript highlight! link javasClassKeyword Keyword
  autocmd FileType javascript highlight! link jsClassMethodType Keyword
  autocmd FileType javascript highlight! link jsClassMethodType Keyword
  autocmd FileType javascript highlight! link jsModuleKeyword Keyword
  autocmd FileType javascript highlight! link jsBlockLabel Label
  autocmd FileType javascript highlight! link jsxAttrib jsUndefined
  autocmd FileType javascript highlight! link jsxCloseString Cleared
  autocmd FileType javascript highlight! link jsxClosePunct Cleared
  autocmd FileType javascript highlight! link jsxOpenPunct Cleared
  autocmd FileType javascript highlight! link jsDestructuringBlock Type
  autocmd FileType javascript highlight! link jsDestructuringPropertyValue Type
  autocmd FileType javascript highlight! link jsDestructuringAssignment Label
  autocmd FileType javascript highlight! link javascriptMethod Function
  autocmd FileType javascript highlight! link javascriptMethodName Function
  autocmd FileType javascript highlight! link graphqlStructure Constant
  autocmd FileType javascript highlight! link graphqlVariable Type
  autocmd FileType javascript highlight! link graphqlName String
  autocmd FileType javascript highlight! link graphqlType Constant
  autocmd FileType javascript highlight! link graphqlStructure Label
  autocmd FileType javascript,vue highlight! link jsFunctionKey Label
  autocmd FileType javascript,vue highlight! link jsFunction jsFuncCall
  autocmd FileType vue highlight! link htmlBold htmlTag

  autocmd FileType sass,vue highlight! link cssProp Constant
  autocmd FileType sass,vue highlight! link cssVendor Constant
  autocmd FileType sass,vue highlight! link cssAttr Type
augroup END

let g:rainbow_active = 1
let g:rainbow_conf = {
      \  'guifgs': ['#d19a66', '#c678dd', '#61afef'],
      \  'operators': '_,_',
      \  'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
      \  'separately': {
      \    'javascript': {
      \      'parentheses_options': 'containedin=jsTryCatchBlock,jsIfElseBlock,jsBlock,jsFuncBlock'
      \    }
      \  }
      \}

" dont load all preprocessors for vue - performance improvement
let g:vue_pre_processors = 'detect_on_enter'

command! Gco silent !git checkout -- %
cabbrev gco Gco
let g:instant_markdown_autoscroll = 1
command! -count=1 HFiles call fzf#run({ 'source': 'git log HEAD -n <count> --diff-filter=MA --name-only --pretty=format: | sed -e /^$/d'})
let g:bookmark_no_default_key_mappings = 1
function! BookmarkMapKeys()
    nmap mm :BookmarkToggle<CR>
    nmap mi :BookmarkAnnotate<CR>
    nmap mn :BookmarkNext<CR>
    nmap mp :BookmarkPrev<CR>
    nmap ma :BookmarkShowAll<CR>
    nmap mc :BookmarkClear<CR>
    nmap mx :BookmarkClearAll<CR>
    nmap mkk :BookmarkMoveUp
    nmap mjj :BookmarkMoveDown
endfunction
function! BookmarkUnmapKeys()
    unmap mm
    unmap mi
    unmap mn
    unmap mp
    unmap ma
    unmap mc
    unmap mx
    unmap mkk
    unmap mjj
endfunction
autocmd BufEnter * :call BookmarkMapKeys()
autocmd BufEnter NERD_tree_* :call BookmarkUnmapKeys()

filetype off
call plug#begin()
Plug 'jiangmiao/auto-pairs'
Plug 'Yggdroot/indentLine'                                         " display indent guides
Plug 'joshdick/onedark.vim'                                        " colorscheme
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'tpope/vim-commentary'                                        " change selected code into comment
Plug 'tpope/vim-repeat'                                            " better .
Plug 'easymotion/vim-easymotion'                                   " adds improved w e b j k
Plug 'rhysd/clever-f.vim'                                          " better f F
if exists('$TMUX')
  Plug 'christoomey/vim-tmux-navigator'                            " move between vim windows and tmux panes with the same mapping
  Plug 'christoomey/vim-tmux-runner'                               " run tests in other tmux pane
  Plug 'roxma/vim-tmux-clipboard'                                  " sync with tmux clipboard
endif
Plug 'andymass/vim-matchup'                                        " jump to matching tag/parentheses; first suspect in case of performance issues
Plug 'tpope/vim-fugitive'                                          " git related commands
Plug 'dominikduda/vim_current_word'                                " highlight word under cursor
Plug 'AndrewRadev/splitjoin.vim'                                   " split to multiple lines
" Plug 'terryma/vim-multiple-cursors'                                " multiple cursors
Plug 'mg979/vim-visual-multi'
Plug 'simnalamburt/vim-mundo'                                      " purview undos
Plug 'jiangmiao/auto-pairs'                                        " auto insert parentheses, quotes etc.
Plug 'tpope/vim-endwise'                                           " auto insert 'end', 'endif' etc.
Plug 'alvan/vim-closetag'                                          " autoclose html tag
Plug 'rhysd/conflict-marker.vim'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }
Plug 'szw/vim-maximizer'                                           " maximize window
Plug 'simeji/winresizer'                                           " window resize helper
Plug 'godlygeek/tabular',               { 'on': 'Tabularize' }     " text align with regexp
Plug 'tpope/vim-abolish'                                           " toggle camelcase, snakecase, etc
Plug 'osyo-manga/vim-anzu'                                         " display amount of search matches
Plug 'tpope/vim-surround'                                          " vim verb for surrounding word
Plug 'junegunn/fzf',                    { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'bartoszmaka/fzf-mru.vim'
Plug 'dyng/ctrlsf.vim'                                             " search projectwide
Plug 'blueyed/vim-diminactive'
Plug 'terryma/vim-expand-region'
Plug 'markwu/vim-mrufiles'
" syntax
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'} 
Plug 'HerringtonDarkholme/yats.vim'
Plug 'tpope/vim-cucumber'
Plug 'othree/jsdoc-syntax.vim'
Plug 'joker1007/vim-ruby-heredoc-syntax'
Plug 'chrisbra/csv.vim'
" Plug 'tpope/vim-rails'
Plug 'sheerun/vim-polyglot'
Plug 'bartoszmaka/vim-rails',           { 'branch': 'dev' }
" fancy tools
Plug 'dominikduda/vim_yank_with_context'
Plug 'liuchengxu/vista.vim'
Plug 'janko/vim-test'
Plug 'tpope/vim-bundler',               { 'for': ['ruby', 'eruby'] }
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-projectionist'
Plug 'mattn/emmet-vim'
Plug 'lmeijvogel/vim-yaml-helper',      { 'for': ['yaml'] }
Plug 'AndrewRadev/switch.vim'
let g:switch_mapping = ""
Plug 'neoclide/coc.nvim',               { 'branch': 'release' }
Plug 'dsznajder/vscode-es7-javascript-react-snippets', { 'do': 'yarn install --frozen-lockfile && yarn compile' }
Plug 'Asheq/close-buffers.vim'
Plug 'dunckr/js_alternate.vim'
Plug 'jparise/vim-graphql'
Plug 'Lenovsky/nuake'
call plug#end()
 " **********************************
 " vim variables
syntax enable             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
let mapleader="\<Space>"

" Use brew/apt installed python instead of venv or osx default
let g:python_host_prog  = '~/.asdf/shims/python2'
let g:python3_host_prog  = '~/.asdf/shims/python3'

" meta
syntax sync fromstart
set undofile                            " keep history in file
set undodir=$HOME/.vim/undo             " path for this file
set grepprg=ag
set noswapfile
set directory=/tmp
set lazyredraw
set hidden                              " don't close buffers
set wildignore+=
      \*/tmp/*,
      \*/node_modules/*,
      \*/.git/*,
      \*.so,
      \*.swp,
      \*.zipo
set clipboard+=unnamedplus              " use system clipboard

" encoding
language en_US.UTF-8
set langmenu=en_US.UTF-8
set fileencoding=utf-8
set encoding=utf8
set laststatus=2
set showtabline=2

" behavior
set completeopt=menuone,noinsert,noselect
set backspace=indent,eol,start
set pumheight=15
set spellsuggest=best,8
set signcolumn=yes
set updatetime=300
set shortmess+=crn

" indent
set smartindent

" window management
set scrolloff=4                         " show at least 4 lines above or under cursor
set sidescrolloff=15
set splitright                          " place new vertical split on right side of current window
set splitbelow                          " place new horizontal split under current window
set diffopt+=vertical,iwhiteall

" tabulator
set softtabstop=2
set shiftwidth=2                        " default tab width
set expandtab                           " Spaces instead of tabs

" line length
set synmaxcol=350                       " disable syntax colors after given column
set colorcolumn=81                      " color nth column
set showbreak=\/_
set nowrap                              " don't wrap lines

" searching
set ignorecase
set smartcase

" ui
set noshowmode                          " do not display current mode in cmdline (airline already handles it)
set listchars=
      \eol:$,
      \tab:>-,
      \trail:~,
      \extends:>,
      \precedes:<
set list                                " show whitespaces
set mouse=a
set showcmd                             " show pressed keys
set number                              " show line numbers
set cursorline
set cmdheight=1
set inccommand=nosplit                  " Preview replace
set noruler                             " show cursor position (handled by plugin)
" **********************************

" custom functions
function! DebugHighlight()
  let l:s = synID(line('.'), col('.'), 1)
  let name = synIDattr(synID(line("."),col("."),1),"name")

  echomsg string(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'))
  echomsg "hi<"
        \ . synIDattr(synID(line("."),col("."),1),"name")
        \ . '> trans<'
        \ . synIDattr(synID(line("."),col("."),0),"name")
        \ . "> lo<"
        \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name")
        \ . ">"
  echomsg '==========='
  exe 'syntax list ' . name
endfun
nnoremap <F8> :call DebugHighlight()<CR>
nnoremap <F9> :syntax sync fromstart<CR>
nnoremap <F5> :CocCommand snippets.openSnippetFiles<CR>

" **********************************

if (has("termguicolors"))
  set termguicolors
endif

let g:onedark_color_overrides = {
\ "black": {"gui": "#1d2128", "cterm": "235", "cterm16": "0" },
\ "cursor_grey": { "gui": "#2e3138", "cterm": "59", "cterm16": "15" },
\}
" \ "red": get(s:overrides, "red", { "gui": "#E06C75", "cterm": "204", "cterm16": "1" }),
" \ "dark_red": get(s:overrides, "dark_red", { "gui": "#BE5046", "cterm": "196", "cterm16": "9" }),
" \ "green": get(s:overrides, "green", { "gui": "#98C379", "cterm": "114", "cterm16": "2" }),
" \ "yellow": get(s:overrides, "yellow", { "gui": "#E5C07B", "cterm": "180", "cterm16": "3" }),
" \ "dark_yellow": get(s:overrides, "dark_yellow", { "gui": "#D19A66", "cterm": "173", "cterm16": "11" }),
" \ "blue": get(s:overrides, "blue", { "gui": "#61AFEF", "cterm": "39", "cterm16": "4" }),
" \ "purple": get(s:overrides, "purple", { "gui": "#C678DD", "cterm": "170", "cterm16": "5" }),
" \ "cyan": get(s:overrides, "cyan", { "gui": "#56B6C2", "cterm": "38", "cterm16": "6" }),
" \ "white": get(s:overrides, "white", { "gui": "#ABB2BF", "cterm": "145", "cterm16": "7" }),
" \ "black": get(s:overrides, "black", { "gui": "#282C34", "cterm": "235", "cterm16": "0" }),
" \ "visual_black": get(s:overrides, "visual_black", { "gui": "NONE", "cterm": "NONE", "cterm16": "0" }),
" \ "comment_grey": get(s:overrides, "comment_grey", { "gui": "#5C6370", "cterm": "59", "cterm16": "15" }),
" \ "gutter_fg_grey": get(s:overrides, "gutter_fg_grey", { "gui": "#4B5263", "cterm": "238", "cterm16": "15" }),
" \ "cursor_grey": get(s:overrides, "cursor_grey", { "gui": "#2C323C", "cterm": "236", "cterm16": "8" }),
" \ "visual_grey": get(s:overrides, "visual_grey", { "gui": "#3E4452", "cterm": "237", "cterm16": "15" }),
" \ "menu_grey": get(s:overrides, "menu_grey", { "gui": "#3E4452", "cterm": "237", "cterm16": "8" }),
" \ "special_grey": get(s:overrides, "special_grey", { "gui": "#3B4048", "cterm": "238", "cterm16": "15" }),
" \ "vertsplit": get(s:overrides, "vertsplit", { "gui": "#181A1F", "cterm": "59", "cterm16": "15" }),
colorscheme onedark
set fillchars+=stl:\ ,stlnc:\ ,vert:\│

" **********************************
" plugin variables

" let g:gutentags_trace = 1
let g:loaded_matchit = 1
let g:lightline = {}
let g:lightline.colorscheme = 'onedark'
let g:lightline.active = {
      \   'left': [ [ 'mode', 'spell' ],
      \             [ 'readonly', 'custom_relativepath', 'modified' ]],
      \   'right': [ [ 'custom_line_info' ],
      \              [ 'coc_error', 'coc_warning', 'git_status' ] ]
      \ }
let lightline.inactive = {
      \   'left': [ [ 'readonly', 'custom_relativepath', 'modified' ] ],
      \   'right': [ [ 'custom_line_info' ] ]
      \ }
let lightline.tabline = {
      \   'left': [ ['buffers'] ],
      \   'right': [ ['relativepath'] ]
      \ }
let lightline.component_function = {
      \   'git_status': 'CocGitStatus',
      \ }
let lightline.component_expand = {
      \   'coc_error'        : 'LightlineCocErrors',
      \   'coc_warning'      : 'LightlineCocWarnings',
      \   'buffers'          : 'lightline#bufferline#buffers'
      \ }
let g:lightline.component = {
      \   'custom_line_info' : '%3l/%L:%3v',
      \   'custom_relativepath' : '%<%f'
      \ }
let g:lightline.component_type = {
      \   'coc_error'        : 'error',
      \   'coc_warning'      : 'warning',
      \   'buffers'          : 'tabsel'
      \ }

function! LightlineCocErrors() abort
  let diagnostics = get(b:, 'coc_diagnostic_info', 0)
  if empty(diagnostics)
    return ''
  endif
  let errors = diagnostics['error']
    if errors > 0
      return printf('E %d', errors)
    else
      return ''
    endif
endfunction

function! LightlineCocWarnings() abort
  let diagnostics = get(b:, 'coc_diagnostic_info', 0)
  if empty(diagnostics)
    return ''
  endif
    let info = diagnostics['information']
    let hint = diagnostics['hint']
    let warn = diagnostics['warning']
    let total = info + hint + warn
    if total > 0
      return printf('W %d', total)
    else
      return ''
    endif
endfunction
\ }

autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

function! CocGitStatus() abort
  if len(get(b:, 'coc_git_status', '')) > 0
    return ''. b:coc_git_status
  else
    return ''. ' clean'
  endif
endfunction

function! GetCocStatus() abort
  return get(b:, 'coc_current_function', coc#status())
endfunction
nmap <Leader>1 <Plug>lightline#bufferline#go(1)
nmap <Leader>2 <Plug>lightline#bufferline#go(2)
nmap <Leader>3 <Plug>lightline#bufferline#go(3)
nmap <Leader>4 <Plug>lightline#bufferline#go(4)
nmap <Leader>5 <Plug>lightline#bufferline#go(5)
nmap <Leader>6 <Plug>lightline#bufferline#go(6)
nmap <Leader>7 <Plug>lightline#bufferline#go(7)
nmap <Leader>8 <Plug>lightline#bufferline#go(8)
nmap <Leader>9 <Plug>lightline#bufferline#go(9)

noremap <leader>]           :bnext<CR>
noremap <leader>[           :bprevious<CR>
noremap <leader>}           :bnext<CR>
noremap <leader>{           :bprevious<CR>
nnoremap <silent> <leader>w :bp<bar>sp<bar>bn<bar>bd<CR>:Bdelete nameless<CR>
nnoremap <silent> <leader>W :bp<bar>sp<bar>bn<bar>bd!<CR>:Bdelete nameless<CR>
nnoremap <silent> <leader><leader>W :Bdelete! hidden<CR>
noremap <leader><space>!    :bdelete!<CR>
nnoremap <leader>q          :close<CR>

" anzu
let g:anzu_status_format = "%#Search#▶%p◀ (%i/%l)"
nmap n <Plug>(anzu-n-with-echo)zz<Plug>(anzu-echo-search-status)
nmap N <Plug>(anzu-N-with-echo)zz<Plug>(anzu-echo-search-status)
nmap * <Plug>(anzu-star-with-echo)zz<Plug>(anzu-echo-search-status)
nmap # <Plug>(anzu-sharp-with-echo)zz<Plug>(anzu-echo-search-status)

" coc
let g:coc_global_extensions = [
      \ 'coc-tsserver',
      \ 'coc-vetur',
      \ 'coc-tag',
      \ 'coc-solargraph',
      \ 'coc-eslint',
      \ 'coc-stylelint',
      \ 'coc-diagnostic',
      \ 'coc-snippets',
      \ 'coc-ultisnips',
      \ 'coc-emmet',
      \ 'coc-css',
      \ 'coc-tailwindcss',
      \ 'coc-pyls',
      \ 'coc-elixir',
      \ 'coc-html',
      \ 'coc-json',
      \ 'coc-vimlsp',
      \ 'coc-syntax',
      \ 'coc-yaml',
      \ 'coc-word',
      \ 'coc-highlight',
      \ 'coc-yank',
      \ 'coc-git',
      \ 'coc-marketplace',
      \ 'coc-explorer',
      \ 'coc-bookmark',
      \ ]

" autocomplete
function! UnifiedJumpToDefinition()
  if CocAction('jumpDefinition') == v:true
    echomsg 'coc'
  else
    echomsg 'find'
    execute "normal gf"
  endif
endfunction

function! s:isWhitespaceOrNothingBeforeCursor() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:showDocumentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
    execute 'wincmd L'
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

function! s:HandleCompletion()
  if pumvisible()
    return coc#_select_confirm()
  endif

  if coc#expandableOrJumpable()
    return "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>"
  endif

  if <SID>isWhitespaceOrNothingBeforeCursor()
    return "\<TAB>"
  endif

  return "\<C-n>"
endfunction

function! s:HandleBufferFix()
  if (index(['javascript','javascript.jsx','typescript','typescript.tsx','vue'], &filetype) >= 0)
    CocCommand eslint.executeAutofix
  else
    call CocAction('format')
  endif
endfunction
command! -nargs=0 Format :call CocAction('format')
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" inoremap <expr><TAB>   pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
inoremap <expr><C-j>   pumvisible() ? "\<C-n>" : coc#refresh()
inoremap <expr><C-k>   pumvisible() ? "\<C-p>" : coc#refresh()
vmap <C-e> <Plug>(coc-snippets-select)
let g:coc_snippet_next = '<tab>'
let g:coc_snippet_prev = '<s-tab>'
imap <expr><C-e>
      \ coc#expandableOrJumpable() ?
      \ "\<Plug>(coc-snippets-expand-jump)" :
      \ "\<Plug>(emmet-expand-abbr)"

" inoremap <silent><expr> <TAB> <SID>HandleCompletion()
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>isWhitespaceOrNothingBeforeCursor() ? "\<TAB>" : '\<C-n>'

nnoremap <silent><leader>K :call <SID>showDocumentation()<CR>
nnoremap <C-l> :call coc#util#float_jump()<CR>
nnoremap <C-h> :call coc#util#float_hide()<CR>
inoremap <C-l> <esc>:call coc#util#float_jump()<CR>a
inoremap <C-h> <esc>:call coc#util#float_hide()<CR>a

nmap gd :call UnifiedJumpToDefinition()<CR>
nmap gr <Plug>(coc-references)

nmap <C-l><C-r> <Plug>(coc-references)
vmap <C-l><C-f> <Plug>(coc-format-selected)
nmap <C-l><C-f> <Plug>(coc-format-selected)
xmap <C-l><C-a> <Plug>(coc-codeaction-selected)
vmap <C-l><C-a> <Plug>(coc-codeaction-selected)
nmap <C-l><C-a> <Plug>(coc-codeaction)
nmap <C-l><C-l> :CocList<CR>
nmap <C-l><C-e> :CocList diagnostics<CR>
nmap <C-l><C-m> :CocCommand<CR>
nmap <leader>E  <Plug>(coc-diagnostic-info)
nmap <leader>H  <Plug>(coc-float-hide)
nmap <leader>J  <Plug>(coc-float-jump)
" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a) 

nnoremap <C-m><C-l> :CocList diagnostics<CR>
nnoremap <leader>ml :CocList diagnostics<CR>
nnoremap <C-m><C-f> :call <SID>HandleBufferFix()<CR>
nnoremap <leader>mf :call <SID>HandleBufferFix()<CR>
nnoremap [e :call CocAction('diagnosticPrevious')<CR>
nnoremap ]e :call CocAction('diagnosticNext')<CR>

" vim test
let test#strategy = "neovim"
let test#neovim#term_position = "vertical"
let test#ruby#cucumber#executable = 'bundle exec cucumber'
let test#ruby#rspec#executable = 'bundle exec rspec'
nmap TT :TestNearest<CR>
nmap <leader>tt :TestNearest<CR>
nmap TF :TestFile<CR>
nmap <leader>tf :TestFile<CR>

" coc-git
nmap [g <Plug>(coc-git-prevchunk)
nmap ]g <Plug>(coc-git-nextchunk)
nmap gs <Plug>(coc-git-chunkinfo)

" jsxpretty
let g:vim_jsx_pretty_colorful_config = 1

" mundo
let g:mundo_right = 1

" conflict marker
let g:conflict_marker_enable_mappings = 0

" winresizer
let g:winresizer_vert_resize    = 1
let g:winresizer_horiz_resize   = 1
let g:winresizer_start_key      = '<C-w>e'

" maximizer
let g:maximizer_default_mapping_key = '<C-w>m'

" vimcurrentword
let g:vim_current_word#enabled                          = 1
let g:vim_current_word#highlight_only_in_focused_window = 1
let g:vim_current_word#highlight_twins                  = 1
let g:vim_current_word#highlight_current_word           = 1
let g:vim_current_word#highlight_delay                  = 400

" easymotion
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
let g:EasyMotion_off_screen_search = 0

map ; <Plug>(easymotion-prefix)

let g:AutoClosePreserveDotReg = 0

" autopairs
let g:AutoPairsShortcutToggle     = ''
let g:AutoPairsShortcutBackInsert = ''
let g:AutoPairsShortcutJump       = ''
let g:AutoPairsShortcutFastWrap   = ''
let g:AutoPairsMapCh              = ''
let g:AutoPairs = {
      \ '(':')',
      \ '[':']',
      \ '{':'}',
      \ "'":"'",
      \ '"':'"',
      \ "`":"`",
      \ '```':'```',
      \ '"""':'"""',
      \ "'''":"'''",
      \ "|":"|",
      \ "<%#":"%>",
      \ "<%=":"%>",
      \ "<%":"%>",
      \ }

" closetag
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.erb,*.jsx,*.js,*.vue"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.erb,*.js,*.vue'
let g:closetag_emptyTags_caseSensitive = 1
let g:closetag_shortcut = '>'

" matchup
let g:matchup_matchparen_offscreen          = {'method': 'popup'}
let g:matchup_matchparen_deferred           = 1
let g:matchup_matchparen_hi_surround_always = 0
let g:matchup_matchparen_timeout            = 350
let g:matchup_matchparen_insert_timeout     = 150
let g:matchup_matchparen_deferred           = 1
let g:matchup_matchparen_deferred_show_delay = 120
let g:matchup_matchparen_deferred_hide_delay = 500
let g:matchup_matchparen_stopline = 40
let g:matchup_motion_override_Npercent = 0

" splitjoin
let g:splitjoin_split_mapping     = ''
let g:splitjoin_join_mapping      = ''
let g:splitjoin_ruby_curly_braces = 0
let g:splitjoin_ruby_hanging_args = 0
nmap <C-m><C-d> :SplitjoinJoin<cr>
nmap <C-m><C-s> :SplitjoinSplit<cr>

" multiplecursors visual-multi
" let g:multi_cursor_exit_from_insert_mode = 0
let g:VM_maps = {}
let g:VM_maps["Skip Region"]                 = '<C-x>'

" ctrlsf
let g:ctrlsf_context = '-B 2 -A 2'
let g:ctrlsf_indent = 2
let g:ctrlsf_winsize = '80'
nmap <leader>f <Plug>CtrlSFPrompt
vmap <leader>f <Plug>CtrlSFVwordPath
vmap <leader>F <Plug>CtrlSFVwordExec
nmap <leader>F <Plug>CtrlSFCCwordPath

" projectionist
let g:projectionist_heuristics = {
      \   '*': {
      \     '*.vue': {
      \       'alternate': '__tests__/{}.test.js',
      \       'type': 'source'
      \     },
      \     '*.js': {
      \       'alternate': '__tests__/{}.test.js',
      \       'type': 'source'
      \     },
      \     '__tests__/*.test.js': {
      \       'alternate': '{}.js',
      \       'type': 'test'
      \     },
      \     '*.ts': {
      \       'alternate': '__tests__/{}.test.ts',
      \       'type': 'source'
      \     },
      \     '__tests__/*.test.ts': {
      \       'alternate': '{}.ts',
      \       'type': 'test'
      \     },
      \     'app/*.rb': {
      \       'alternate': 'spec/{}_spec.rb',
      \       'type': 'source'
      \     },
      \     'lib/*.rb': {
      \       'alternate': 'spec/{}_spec.rb',
      \       'type': 'source'
      \     },
      \     'spec/*_spec.rb': {
      \       'alternate': 'app/{}.rb',
      \       'type': 'test'
      \     },
      \     'app/controllers/*_controller.rb': {
      \       'alternate': 'spec/requests/{}_spec.rb',
      \       'type': 'test'
      \     },
      \     'spec/requests/*_spec.rb': {
      \       'alternate': 'app/controllers/{}_controller.rb',
      \       'type': 'test'
      \     }
      \   }
      \ }
nnoremap <leader>a :A<CR>
nnoremap <leader>ev :Eview<CR>
nnoremap <leader>ec :Econtroller<CR>

" fzf
let $FZF_DEFAULT_OPTS='--layout=reverse'
function! FloatingFZF()
  let buf = nvim_create_buf(v:false, v:true)
  call setbufvar(buf, 'number', 'no')

  let isNarrow = &columns < 150
  let height = float2nr(&lines * 0.4)
  let width = float2nr(&columns * (isNarrow ? 1 : 0.66))
  let row = float2nr(&lines * 0.25)
  let col = float2nr(isNarrow ? 0 : ((&columns - width) / 2))

  let opts = {
        \ 'relative': 'editor',
        \ 'row': row,
        \ 'col': col,
        \ 'width': width,
        \ 'height':height,
        \ }
  let win =  nvim_open_win(buf, v:true, opts)
  call setwinvar(win, '&number', 0)
  call setwinvar(win, '&relativenumber', 0)
endfunction

let g:fzf_layout = { 'window': 'call FloatingFZF()' }
let g:fzf_command_prefix = 'Fzf'
let g:fzf_mru_relative = 1
let g:fzf_colors = { 'bg': ['bg', 'FZFNormal'] }

function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
      \ 'ctrl-q': function('s:build_quickfix_list'),
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit'}
command! -bang -nargs=? -complete=dir FZFFilesPreview
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

" fix fzf being open in terminal/insert mode randomly after 0.4 update by adding 'a<Bs>'
nnoremap <C-p><C-p> :FZFFilesPreview<CR>a<Bs>
nnoremap <leader>pp :FZFFilesPreview<CR>a<Bs>
nnoremap <C-p><C-r> :FZFFreshMruPreview<CR>a<Bs>
nnoremap <leader>pr :FZFFreshMruPreview<CR>a<Bs>
nnoremap <C-p><C-g> :FzfGitFiles?<CR>a<Bs>
nnoremap <leader>pg :FzfGitFiles?<CR>a<Bs>
nnoremap <C-p><C-h> :FzfHistory<CR>a<Bs>
nnoremap <C-p><C-b> :FzfBuffers<CR>a<Bs>
nnoremap <C-p><C-f> :FzfRg<CR>a<Bs>
nnoremap <leader>pf :FzfRg<CR>a<Bs>
nnoremap <C-p><C-l> :FzfBLines<CR>a<Bs>
nnoremap <leader>pl :FzfBLines<CR>a<Bs>
nnoremap <C-p><C-v> :FzfBCommits<CR>a<Bs>
nnoremap <C-p><C-m> :FzfMarks<CR>a<Bs>

" vim-rails
let vim_rails_map_buf_nav_commands = 0

" vim-expand-region
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)

" indentLine
let g:indentLine_fileTypeExclude = ['markdown', 'help', 'coc-explorer']
let g:indentLine_faster = 1

" vim-repeat
silent! call repeat#set("\<Plug>.", v:count)

" vista
let g:vista_echo_cursor_strategy = 'both'
let g:vista#renderer#enable_icon = 1
let g:vista#renderer#icons = {
      \    'func': "λ",
      \    'function': "λ",
      \    'functions': "λ",
      \    'var': "",
      \    'variable': "",
      \    'variables': "",
      \    'const': "",
      \    'constant': "",
      \    'method': "λ",
      \    'package': "\ue612",
      \    'packages': "\ue612",
      \    'enum': "",
      \    'enumerator': "",
      \    'module': "\uf136",
      \    'modules': "\uf136",
      \    'type': "\uf7fd",
      \    'typedef': "\uf7fd",
      \    'types': "\uf7fd",
      \    'field': "\uf30b",
      \    'fields': "\uf30b",
      \    'macro': "\uf8a3",
      \    'macros': "\uf8a3",
      \    'map': "\ufb44",
      \    'class': "",
      \    'augroup': "\ufb44",
      \    'struct': "\uf318",
      \    'union': "\ufacd",
      \    'member': "\uf02b",
      \    'target': "\uf893",
      \    'property': "",
      \    'interface': "",
      \    'namespace': "::",
      \    'subroutine': "\uf9af",
      \    'implementation': "\uf776",
      \    'typeParameter': "\uf278",
      \    'default': "\uf29c"
      \ }
nnoremap <C-k><C-v> :Vista!!<CR>
nnoremap <C-p><C-s> :Vista finder coc<CR>

" tabular
vnoremap <C-m><C-t> :Tabularize /

" nuake
let g:nuake_size = 0.40
let g:nuake_position = 'bottom'
nnoremap <C-l><C-n> :Nuake<CR>
tnoremap <C-l><C-n> <C-\><C-n>:Nuake<CR>
tnoremap <C-w>h     <C-\><C-n><C-w>h
tnoremap <C-w>j     <C-\><C-n><C-w>j
tnoremap <C-w>k     <C-\><C-n><C-w>k
tnoremap <C-w>l     <C-\><C-n><C-w>l

nnoremap <C-k><C-u> :MundoToggle<CR>
nnoremap <silent><C-k><C-e> :CocCommand explorer
      \ --toggle
      \ --focus
      \ <CR>
nnoremap <silent><C-k><C-f> :CtrlSFToggle<CR>
nnoremap <C-g><C-b> :Gblame<CR>
nnoremap <leader>gb :Gblame<CR>
nnoremap <C-g><C-d> :Gdiffsplit<CR>
nnoremap <leader>gd :Gdiffsplit<CR>
vnoremap <C-m><C-s> :sort<CR>
inoremap jk <esc>
nnoremap K 5k
nnoremap J 5j
vnoremap K 5k
vnoremap J 5j

" exit terminal mode
tnoremap <leader><esc> <C-\><C-n>
nnoremap <leader>` :e#<CR>
nnoremap <leader><esc> :e#<CR>
nnoremap / /\V
nnoremap ? /
nnoremap <Bs> :noh<CR>
vnoremap * y<Esc>/<C-r>"<CR>``
nnoremap <leader>r yiw:%s/\V<C-r>"//g<Left><Left>
vnoremap <leader>r y:%s/\V<C-r>"//g<Left><Left>
nnoremap <leader>R yiw:%s/\V<C-r>"/<C-r>"/g<Left><Left>
vnoremap <leader>R y:%s/\V<C-r>"/<C-r>"/g<Left><Left>
nnoremap Q <NOP>
map q: <NOP>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <S-Left>
cnoremap <C-f> <S-Right>
cnoremap <C-g> <C-c>
inoremap <C-a> <Home>
nnoremap <C-a> <Home>
nnoremap <C-e> <End>
nnoremap <leader>j i<CR><Esc>
nnoremap <leader>k <esc>kJ
map <leader>h ^
map <leader>l $
nnoremap j gj
nnoremap k gk
nnoremap <M-h>      <C-w>h
nnoremap <M-j>      <C-w>j
nnoremap <M-k>      <C-w>k
nnoremap <M-l>      <C-w>l
nnoremap <D-h>      <C-w>h
nnoremap <D-j>      <C-w>j
nnoremap <D-k>      <C-w>k
nnoremap <D-l>      <C-w>l
nnoremap <C-space>h <C-w>h
nnoremap <C-space>j <C-w>j
nnoremap <C-space>k <C-w>k
nnoremap <C-space>l <C-w>l

if exists('$TMUX')
  let g:tmux_navigator_no_mappings = 1
  nnoremap <silent><C-w>h :TmuxNavigateLeft<CR>
  nnoremap <silent><C-w>j :TmuxNavigateDown<CR>
  nnoremap <silent><C-w>k :TmuxNavigateUp<CR>
  nnoremap <silent><C-w>l :TmuxNavigateRight<CR>
endif

nnoremap g; g;zz
nnoremap `` ``zz
vnoremap > >gv
vnoremap < <gv
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
nnoremap <F13> <esc>:w<CR>
nnoremap <F14> <esc>:wa<CR>
inoremap <F13> <esc>:w<CR>
inoremap <F14> <esc>:wa<CR>

cabbrev W   w
cabbrev Wa  wa
cabbrev WA  wa
cabbrev Wq  wq
cabbrev WQ  wq
cabbrev Wqa wqa
cabbrev WQa wqa
cabbrev Q   q
cabbrev Qa  qa
cabbrev Q!  q
cabbrev Qa! qa

" **********************************
function! DetectReactFiletype()
  let n = 1
  while n < 10 && n < line("$")
    if getline(n) =~ "react"
      if expand('%:e') == 'js'
        set filetype=javascript.jsx
      elseif expand('%:e') == 'ts'
        set filetype=typescript.tsx
      endif

      return
    endif

    let n = n + 1
  endwhile
endfunction

function! FormatHelpBuffer()
  " TODO: line above does not work for some reason
  execute 'normal \<C-w>L'
  execute 'vertical resize 86'
endfunction

augroup filetype_fixes
  autocmd!
  "I have to set filetype explicitly to enable rspec syntax and some features, even if it's already set to ruby for some reason
  autocmd BufNewFile,BufReadPost *.rb set filetype=ruby
  autocmd BufNewFile,BufReadPost *.ts,*.tsx set syntax=typescriptreact
  autocmd BufNewFile,BufReadPost .eslintrc set filetype=json
  autocmd BufNewFile,BufReadPost,BufWritePost *.js,*.ts call DetectReactFiletype()
  autocmd TermEnter * setlocal scrolloff=0
  autocmd TermLeave * setlocal scrolloff=4
  autocmd BufEnter * if &buftype == 'help' | call FormatHelpBuffer() | endif
augrou END

augroup filetype_scoped_settings
  autocmd!
  autocmd FileType json          setlocal conceallevel=2
  autocmd Filetype gitcommit     setlocal colorcolumn=51 spell
  " autocmd BufEnter * if &filetype == 'coc-explorer' | set conceallevel=0
  autocmd BufEnter,BufReadPre,BufNewFile *.md setlocal conceallevel=0
  autocmd FileType scss set iskeyword+=-
  autocmd FileType ctrlsf nnoremap <leader>S :CtrlSFUpdate<CR>
  autocmd FileType javascript,typescript,javascript.jsx,typescript.tsx iabbrev <buffer> cosnt const
  autocmd FileType vue setlocal commentstring=\/\*\ %s\ \*\/
augroup END

augroup callbacks
  autocmd!
  autocmd BufReadPost * syntax sync fromstart
augroup END

autocmd FileType vim,tex,log
      \ let [
      \ b:matchup_matchparen_fallback,
      \ b:matchup_matchparen_enabled]
      \ = [0, 0]
autocmd QuickFixCmdPost wincmd J

function! DisableAllHeavyStuff()
  setlocal syntax=off
  setlocal nospell
  CocDisable
endfunction

augroup disable_syntax_for_huge_files
  autocmd!
  autocmd BufReadPre * if getfsize(@%) > 1000000 | call DisableAllHeavyStuff() | endif
augroup END

augroup remember_cursor_position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

augroup syntax_fixes
  " don't hide quotes in JSON keys
  autocmd FileType json syntax region jsonKeyword matchgroup=jsonQuote start=/"/  end=/"\ze[[:blank:]\r\n]*\:/ contained
  autocmd FileType json syntax region jsonString oneline matchgroup=jsonQuote start=/"/  skip=/\\\\\|\\"/  end=/"/ contains=jsonEscape contained

  " fix sass highlighting
  autocmd FileType sass syntax match sassMixinName "@keyframes"

  " fix js weird coloring inside functions in objects like { foo() { /* weird colors here*/ } }
  autocmd FileType javascript syntax clear jsObjectShorthandProp jsObject jsParensError jsParen

  " remove a tag underline
  autocmd FileType vue syntax clear htmlLink htmlH2 " clearing this syntax rule broke style highlighting
  autocmd FileType vue syntax match htmlArg /\<aria-[a-z\-]\+\>/  contained
  " autocmd FileType vue syntax match vueSlotName /\#[a-z]\+/
  " autocmd FileType vue syntax region contains=htmlTagN,htmlString,htmlArg,htmlValue,htmlTagError,htmlEvent,htmlCssDefinition,@htmlPreproc,@htmlArgCluster,vueSlotName
augroup END

augroup color_scheme_tweaks
  autocmd!

  highlight! CursorLine       guibg=#2e3138
  highlight! CursorLineNR     guibg=#2e3138 gui=bold
  highlight! CursorColumn     guibg=#2e3138
  highlight! ColorColumn      guibg=#252a32
  highlight! FZFNormal        guibg=#222222
  highlight! CursorColumn     guibg=#512121
  highlight! CursorColumnNR   guibg=#512121
  highlight! IncSearch        guifg=#FF0000 guibg=NONE gui=bold
  highlight! Search           guifg=#FFFFFF guibg=NONE gui=bold
  highlight! TabLineSel       guifg=#E5C07B
  highlight! MatchTag         gui=reverse,bold
  highlight! MatchParen       guifg=NONE    guibg=NONE gui=reverse
  highlight! MatchParenCur    guifg=NONE    guibg=NONE gui=reverse
  highlight! link MatchWord   MatchTag

  highlight! CurrentWordTwins guibg=#363636 gui=bold
  highlight! CurrentWord      guibg=#222200 gui=bold

  highlight! Comment         gui=italic
  highlight! Warning         guibg=#443333
  highlight! Error           guibg=#512121
  highlight! Visual          guibg=#401437

  highlight! link CocErrorHighlight Error
  highlight! link CocWarningHighlight Warning
  highlight! link CocInfoHighlight Warning
  highlight! link CocHintHighlight Warning

  highlight! ctrlsfMatch guibg=#583c34 guifg=NONE gui=NONE

  highlight! DiffChange  guibg=#3c3c34 guifg=NONE gui=NONE
  highlight! DiffText    guibg=#525200 guifg=NONE gui=NONE
  highlight! DiffAdd     guibg=#283c34 guifg=NONE gui=NONE
  highlight! DiffDelete  guibg=#382c34 guifg=NONE gui=NONE

  highlight! link TSConstMacro Type
  highlight! link TSKeyword Label
  highlight! link TSLabel Identifier
  " highlight! link TSConstant Type

  autocmd FileType typescript highlight! link typescriptStorageClass typescriptReserved
  autocmd FileType typescript highlight! link typescriptVariableDeclaration Type
  autocmd FileType typescript highlight! link typescriptClassName typescriptPredefinedType
  autocmd FileType typescript highlight! link typescriptClassHeritage typescriptPredefinedType
  autocmd FileType typescript highlight! link typescriptClassExtends Label
  autocmd FileType typescript highlight! link typescriptClassKeyword Label
  autocmd FileType typescript highlight! link typescriptFuncKeyword Label
  autocmd FileType typescript highlight! link typescriptAmbientDeclaration Label
  autocmd FileType typescript highlight! link typescriptExport Label
  autocmd FileType typescript highlight! link typescriptImport Label
  autocmd FileType typescript highlight! link typescriptArrowFunc Label
  autocmd FileType typescript highlight! link typescriptTypeParameter Type
  autocmd FileType typescript highlight! link typescriptTypeReference Type
  autocmd FileType typescript highlight! link typescriptCall Label

  autocmd FileType javascript highlight! link jsStorageClass Keyword
  autocmd FileType javascript highlight! link jsClassDefinition Type
  autocmd FileType javascript highlight! link javasClassKeyword Keyword
  autocmd FileType javascript highlight! link jsClassMethodType Keyword
  autocmd FileType javascript highlight! link jsClassMethodType Keyword
  autocmd FileType javascript highlight! link jsModuleKeyword Keyword
  autocmd FileType javascript highlight! link jsBlockLabel Label
  autocmd FileType javascript highlight! link jsxAttrib jsUndefined
  autocmd FileType javascript highlight! link jsxCloseString Cleared
  autocmd FileType javascript highlight! link jsxClosePunct Cleared
  autocmd FileType javascript highlight! link jsxOpenPunct Cleared
  autocmd FileType javascript highlight! link jsDestructuringBlock Type
  autocmd FileType javascript highlight! link jsDestructuringPropertyValue Type
  autocmd FileType javascript highlight! link jsDestructuringAssignment Label
  autocmd FileType javascript highlight! link javascriptMethod Function
  autocmd FileType javascript highlight! link javascriptMethodName Function
  autocmd FileType javascript highlight! link graphqlStructure Constant
  autocmd FileType javascript highlight! link graphqlVariable Type
  autocmd FileType javascript highlight! link graphqlName String
  autocmd FileType javascript highlight! link graphqlType Constant
  autocmd FileType javascript highlight! link graphqlStructure Label
  autocmd FileType javascript,vue highlight! link jsFunctionKey Label
  autocmd FileType javascript,vue highlight! link jsFunction jsFuncCall
  autocmd FileType vue highlight! link htmlBold htmlTag

  " autocmd FileType sass,vue highlight! link cssProp Constant
  " autocmd FileType sass,vue highlight! link cssVendor Constant
  " autocmd FileType sass,vue highlight! link cssAttr Type
augroup END

vnoremap <c-y> :YankWithContext<CR>

" dont load all preprocessors for vue - performance improvement
let g:vue_pre_processors = 'detect_on_enter'

command! Gco silent !git checkout -- %
cabbrev gco Gco
let g:instant_markdown_autoscroll = 1
command! -count=1 HFiles call fzf#run({ 'source': 'git log HEAD -n <count> --diff-filter=MA --name-only --pretty=format: | sed -e /^$/d'})
command! CopyPath execute 'let @+ = expand("%")'

" coc-bookmark
nmap ]b <Plug>(coc-bookmark-next)
nmap [b <Plug>(coc-bookmark-prev)
nmap <Leader>bb <Plug>(coc-bookmark-toggle)
nmap <Leader>ba <Plug>(coc-bookmark-annotate)
nmap <Leader>bl :CocList bookmark<CR>
nmap <Leader>bc :CocCommand bookmark.clearForCurrentFile<CR>
nmap <Leader>bC :CocCommand bookmark.clearForAllFiles<CR>

function! SumLastSelection()
  try
    let l:previous_a_value = @a
    norm! gv"ay
    let total = command(substitute(@a,'[^0-9. ]','+','g'))
    echomsg "total: " . total
  finally
    let @a = l:previous_a_value
  endtry
endfun
command! SumLastSelection call SumLastSelection()

lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  highlight = {
    enable = true,              -- false will disable the whole extension
  },
  indent = {
    enable = true
  }
}
EOF
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"

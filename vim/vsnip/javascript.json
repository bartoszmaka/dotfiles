{
  "switch": {
    "prefix": ["sw", "switch", "case"],
    "description": "switch statement",
    "body": [
      "switch (${1}) {",
      "  case ${2}:",
      "}"
    ]
  },
  "if": {
    "prefix": "if",
    "description": "if statement",
    "body": [
      "if (${1}) {",
      "  ${2}",
      "}"
    ]
  },
  "ita": {
    "prefix": "ita",
    "description": "jest it async",
    "body": [
      "it('${1}', async () => {",
      "  ${2}",
      "});"
    ]
  },
  "it": {
    "prefix": "it",
    "description": "jest it",
    "body": [
      "it('${1}', () => {",
      "  ${2}",
      "});"
    ]
  },
  "test": {
    "prefix": "test",
    "description": "jest test",
    "body": [
      "test('${1}', () => {",
      "  ${2}",
      "});"
    ]
  },
  "de": {
    "prefix": "de",
    "description": "jest describe",
    "body": [
      "describe('${1}', () => {",
      "  ${2}",
      "});"
    ]
  },
  "con": {
    "prefix": "con",
    "description": "desctucture object",
    "body": [
      "const { ${1} } = ${2}"
    ]
  },
  "re": {
    "prefix": "re",
    "description": "require()",
    "body": [
      "const ${1} = require('${2}');"
    ]
  },
  "e": {
    "prefix": "e",
    "description": "export",
    "body": [
      "export ${1}"
    ]
  },
  "c": {
    "prefix": "c",
    "description": "const",
    "body": [
      "const ${1}"
    ]
  },
  "ed": {
    "prefix": "ed",
    "description": "export default",
    "body": [
      "export default ${1}"
    ]
  },
  "ec": {
    "prefix": "ec",
    "description": "export const",
    "body": [
      "export const ${1}"
    ]
  },
  "cl": {
    "prefix": "cl",
    "description": "console.log",
    "body": [
      "console.log(${1})"
    ]
  },
  "ct": {
    "prefix": "ct",
    "description": "constructor",
    "body": [
      "constructor(${1}) {",
      "  ${2}",
      "}"
    ]
  },
  "ctr": {
    "prefix": "ctr",
    "description": "component constructor",
    "body": [
      "constructor(props) {",
      "  super(props);",
      "  ${1}",
      "}"
    ]
  },
  "teao": {
    "prefix": "teao",
    "description": "to eq array containing obj matching",
    "body": [
      "toEqual(",
      "  expect.arrayContaining([",
      "    expect.objectContaining({",
      "      ${1}",
      "    })",
      "  ])",
      ")"
    ]
  },
  "tea": {
    "prefix": "tea",
    "description": "to eq array containing",
    "body": [
      "toEqual(",
      "  expect.arrayContaining([",
      "    ${1}",
      "  ])",
      ")"
    ]
  },
  "teo": {
    "prefix": "teo",
    "description": "to eq object containing",
    "body": [
      "toEqual(",
      "  expect.objectContaining({",
      "    ${1}",
      "  })",
      ")"
    ]
  },
  "sctr": {
    "prefix": "sctr",
    "description": "Scaffold test react component",
    "body": [
      "import React from 'react';",
      "import { shallow } from 'enzyme';",
      "import toJson from 'enzyme-to-json';",
      "",
      "import { ${1} } from '../${1}';",
      "",
      "const setup = (newProps = {}, rendering = shallow) => {",
      "  const props = {",
      "    ${2}",
      "    ...newProps,",
      "  };",
      "",
      "  const wrapper = rendering(<${1} {...props} />);",
      "",
      "  return { wrapper, props };",
      "};",
      "${3}"
    ]
  },
  "etms": {
    "prefix": "etms",
    "description": "expect to match snapshot",
    "body": [
      "expect(${1:toJson(wrapper)}).toMatchSnapshot()"
    ]
  },
  "jfn": {
    "prefix": "jfn",
    "description": "jest.fn()",
    "body": [
      "jest.fn()"
    ]
  },
  "scsnap": {
    "prefix": "scsnap",
    "description": "Description",
    "body": [
      "import React from 'react'",
      "import { shallow } from 'enzyme'",
      "import toJson from 'enzyme-to-json'",
      "",
      "import { ${1} } from '${2}'",
      "",
      "describe('${1}', () => {",
      "  it('should match the snapshot', () => {",
      "    const props = {",
      "      ${3}",
      "    }",
      "",
      "    const wrapper = shallow(<${1} {...props} />)",
      "",
      "    expect(toJson(wrapper)).toMatchSnapshot()",
      "  })",
      "})"
    ]
  },
  "jstr": {
    "prefix": "jstr",
    "description": "JSON.stringify",
    "body": [
      "JSON.stringify(${1}, null, 2)"
    ]
  },
  "idb": {
    "prefix": "idb",
    "description": "inline debugger",
    "body": [
      "(() => { debugger })()"
    ]
  },
  "tcd": {
    "prefix": "tcd",
    "description": "try-catch data",
    "body": [
      "try {",
      "\t${1}",
      "\treturn [result, null]",
      "} catch (error) {",
      "\treturn [null, error]",
      "}"
    ]
  },
  "tc": {
    "prefix": "tc",
    "description": "try-catch",
    "body": [
      "try {",
      "\t${1}",
      "} catch (error) {",
      "\t${2}",
      "}"
    ]
  },
  "ef": {
    "prefix": "ef",
    "description": "export function",
    "body": [
      "export function "
    ]
  },
  "eaf": {
    "prefix": "eaf",
    "description": "export async function",
    "body": [
      "export async function "
    ]
  },
	"e.target.value": {
		"prefix": "etv",
		"description": "e.target.value",
		"body": "e.target.value"
	},
	"event.target.value": {
		"prefix": "Etv",
		"description": "event.target.value",
		"body": "event.target.value"
	},
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}'$0"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": ["export default (${1:params}) => {", "\t$0", "}", ""],
    "description": "Export default function in ES7 syntax"
  },
  "forEach": {
    "prefix": "fe",
    "body": ["${1:array}.forEach(${2:currentItem} => {", "\t${0}", "})", ""],
    "description": "Creates a forEach statement in ES7 syntax"
  },
  "forOf": {
    "prefix": "fof",
    "body": ["for(let ${1:item} of ${2:object}) {", "\t${0}", "}", ""],
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "fin",
    "body": ["for(let ${1:item} in ${2:object}) {", "\t${0}", "}", ""],
    "description": "Iterating over property values of iterable objects"
  },
  "setInterval": {
    "prefix": "sti",
    "body": ["setInterval(() => {", "\t${2}", "}, ${0:intervalInms})", ""],
    "description": "Executes the given function at specified intervals in ES7 syntax"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": ["setTimeout(() => {", "\t${2}", "}, ${1:delayInms})", ""],
    "description": "Executes the given function after the specified delay in ES7 syntax"
  }
}

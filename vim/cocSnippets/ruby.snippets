# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet bp "binding.pry" w
binding.pry
endsnippet

snippet brp "binding.remote_pry" w
binding.remote_pry
endsnippet

snippet de "spec describe" w
describe '${1}' do
  ${2}
end
endsnippet

snippet desc "spec describe" w
describe '${1}' do
  ${2}
end
endsnippet

snippet sce "spec scenario" w
scenario '${1}' do
  ${2}
end
endsnippet

snippet context "spec context" w
context '${1}' do
  ${2}
end
endsnippet

snippet it "spec it" w
it '${1}' do
  ${2}
end
endsnippet

snippet aa "attr_accessor" w
attr_accessor
endsnippet

snippet aw "attr_writer" w
attr_writer
endsnippet

snippet ar "attr_reader" w
attr_reader
endsnippet

snippet factory "FactoryBot scaffold"
FactoryBot.define do
  factory :${1} do
    ${0}
  end
end
endsnippet

snippet do "do block" w
do |${1}|
  ${2}
end
endsnippet

snippet { "brackets block" w
  { |${1}| ${2} }
endsnippet

snippet if "if block" w
if ${1}
  ${2}
end
endsnippet

snippet ife "if-else block" w
if ${1}
  ${2}
else
  ${3}
end
endsnippet

snippet inc "include" w
include 
endsnippet

snippet req "require" w
require '${1}'
endsnippet

snippet def "function template" w
def ${1}
  ${2}
end
endsnippet

snippet spec "spec scaffold" w
require 'rails_helper'

RSpec.describe ${1} do
  ${2}
end
endsnippet

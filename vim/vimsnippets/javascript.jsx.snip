snippet     imr
abbr        React
options     head
        import React from "react";

snippet     imrc
abbr        React, Component
options     head
        import React, { Component } from "react";

snippet     imrpc
abbr        React, PureComponent
options     head
        import React, { PureComponent } from "react";

snippet     cwm
abbr        componentWillMount
options     head
        componentWillMount = () => { ${1} }

snippet     cdm
abbr        componentDidMount
options     head
        componentDidMount = () => { ${1} }

snippet     cwr
abbr        componentWillReceiveProps
options     head
        componentWillReceiveProps = (nextProps) => { ${1} }

snippet     scu
abbr        shouldComponentUpdate
options     head
        shouldComponentUpdate = (nextProps, nextState) => { ${1} }

snippet     cwup
abbr        componnetWillUpdate
options     head
        componnetWillUpdate = (nextProps, nextState) => { ${1} }

snippet     cdup
abbr        componentDidUpdate
options     head
        componentDidUpdate = (prevProps, prevState) => { ${1} }

snippet     cwun
abbr        componentWillUnmount
options     head
        componentWillUnmount = () => { ${1} }

snippet     ren
abbr        render
options     head
        render() {
          ${1}
          return (
            <div>
              ${2}
            </div>
          )
        }

snippet     sst
abbr        setState short
options     head
        this.setState({ ${1} })

snippet     ssf
abbr        setState full
options     head
        this.setState((state, props) => return { ${1} })

snippet     props
abbr        props
options     head
        this.props.${1:propName}

snippet     state
abbr        state
options     head
        this.state.${1:propName}

snippet     unprop
abbr        unpack props
options     head
        const { ${1} } = this.props;

snippet     unstat
abbr        unpack state
options     head
        const { ${1} } = this.state;

snippet     rce
abbr        Component scaffold
options     head
        import React, { Component } from "react";

        export class `substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '%(^(.)|_(.))', '', 'g')`${0} extends Component {
          render() {
            return (
              <div>
                ${1}
              </div>
            )
          }
        }
        export default `substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '%(^(.)|_(.))', '', 'g')`${0}

snippet     rcc
abbr        Component scaffold + default
options     head
        import React, { Component } from "react";

        export default class `substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\%(^\(.\)\|_\(.\)\)', '\u\1\u\2', 'g')`${0} extends Component {
          render() {
            return (
              <div>
                ${1}
              </div>
            )
          }
        }

snippet     rcep
abbr        Component scaffold + propTypes
options     head
        import React, { Component } from "react";
        import PropTypes from "prop-types";

        export default class `substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\%(^\(.\)\|_\(.\)\)', '\u\1\u\2', 'g')`${0} extends Component {
        static propTypes = {
            
          }
          render() {
            return (
              <div>
                ${1}
              </div>
            )
          }
        }
        export default `substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '%(^(.)|_(.))', '', 'g')`${0}

snippet     rpc
abbr        PureComponent scaffold
options     head
        import React, { PureComponent } from 'react'

        export default class `substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\%(^\(.\)\|_\(.\)\)', '\u\1\u\2', 'g')`${0} extends PureComponent {
          render() {
            return (
              <div>
                ${1}
              </div>
            )
          }
        }

snippet     rpcp
abbr        PureComponent scaffold + propTypes
options     head
        import React, { PureComponent } from 'react'
        import PropTypes from 'prop-types'

        export default class `substitute(bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r'), '\%(^\(.\)\|_\(.\)\)', '\u\1\u\2', 'g')`${0} extends PureComponent {
          static propTypes = {

          }

          render() {
            return (
              <div>
                $2
              </div>
            )
          }
        }

{
	// Place your snippets for ruby here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
			// "${RELATIVE_FILEPATH/\\/([a-zA-Z0-9_]+)/module ${1:/pascalcase}|/gm}",
			// "${RELATIVE_FILEPATH/app(.*).rb/${1:/camelcase}/}"
	 "Create Class": {
		"description": "Create a new Ruby class",
		"prefix": "cla",
		"body": [
			"class ${1:${RELATIVE_FILEPATH/.*\\/(.*).rb/${1:/pascalcase}/g}}",
			"  $0",
			"end"
		],
	},
	//  "Create Class": {
	// 	"description": "Create a new Ruby class",
	// 	"prefix": "cla",
	// 	"body": [
	// 		"${RELATIVE_FILEPATH/^[^\\/]+\\/[^\\/]+\\/(.+?)\\/([^\\/]+)\\/(?:[^\\/]+)$/module ${1:/pascalcase}|/gm}",
	// 		"class ${1:${RELATIVE_FILEPATH/.*\\/(.*).rb/${1:/pascalcase}/g}}",
	// 		"  $0",
	// 		"end"
	// 	],
	// },
  // "Create Dynamic Module Structure": {
  //   "description": "Create dynamic Ruby modules based on file path",
  //   "prefix": "myclass",
  //   "body": [
  //     "${TM_FILEPATH/.*\\/\\w+\\/\\w+\\/(\\w+)\\.rb$/$1/g}",
  //     "${1} ${2:${TM_FILEPATH/(.*\\/\\w+\\/\\w+\\/)\\w+\\.rb$/$1/g}}",
  //     "$0",
  //     "${2/\\/(\\w+)/.${1:/downcase}/g}"
  //   ],
  // },
	"binding.pry": {
		"prefix": "bp",
		"body": [
			"binding.pry"
		]
	},
	"binding.remote_pry": {
		"prefix": "brp",
		"body": [
			"binding.remote_pry"
		]
	},
	"yield_self { |object| binding.pry }": {
		"prefix": "ysbp",
		"body": [
			".yield_self { |object| binding.pry }"
		]
	},
	"spec describe": {
		"description": "describe",
		"prefix": "desc",
		"body": [
			"describe '$1' do",
			"  $2",
			"end"
		]
	},
	"spec scenario": {
		"description": "scenario",
		"prefix": "sce",
		"body": [
			"scenario '$1' do",
			"  $2",
			"end"
		]
	},
	"spec context": {
		"description": "context",
		"prefix": "cont",
		"body": [
			"context '$1' do",
			"  $2",
			"end"
		]
	},
	"spec it": {
		"description": "it",
		"prefix": "it",
		"body": [
			"it '$1' do",
			"  $2",
			"end"
		]
	},
	"attr_reader": {
		"prefix": "ar",
		"body": ["attr_reader"]
	},
	"attr_writer": {
		"prefix": "aw",
		"body": ["attr_writer"]
	},
	"attr_accessor": {
		"prefix": "aa",
		"body": ["attr_accessor"]
	},
	"res": {
		"description": "rescue block",
		"prefix": "res",
		"body": [
			"rescue ${1:StandardError} => ${2:_e}",
			"  $3",
		]
	},
	"factory scaffold": {
		"prefix": "fact",
		"body": [
			"FactoryBot.define do",
			"  factory :$1 do",
			"    $2",
			"  end",
			"end",
		]
	},
	"spec scaffold": {
		"prefix": "spec",
		"body": [
			"require 'rails_helper'",
			"",
			"Rspec.describe $1 do",
			"  $2",
			"end",
		]
	},
	"if": {
		"prefix": "if",
		"body": [
			"if $1",
			"  $2",
			"end",
		]
	},
	"if-else": {
		"prefix": "ife",
		"body": [
			"if $1",
			"  $2",
			"elsif $3",
			"  $4",
			"end",
		]
	},
	"comment-block": {
		"prefix": "###",
		"body": [
			"=begin",
			"  $0",
			"=end",
		]
	},
	"switch": {
		"prefix": ["switch", "case"],
		"body": [
			"case $1",
			"when $2",
			"else $3",
			"  $4",
			"end",
		]
	},
	"rubocop disable": {
		"prefix": "rd",
		"body": "# rubocop:disable $1",
	},
	"rubocop disable methodLength": {
		"prefix": "ml",
		"body": "Metrics/MethodLength",
	},
	"rubocop disable abc": {
		"prefix": "abc",
		"body": "Metrics/AbcSize",
	},
	"JSON.parse(response.body)": {
		"description": "JSON.parse(response.body)",
		"prefix": "jprb",
		"body": ["JSON.parse(response.body)"]
	},
	"to eq(true)": {
		"prefix": "tet",
		"body": ["to eq(true)"]
	},
	"to eq(false)": {
		"prefix": "tef",
		"body": ["to eq(false)"]
	},
	"to eq(nil)": {
		"prefix": "ten",
		"body": ["to eq(nil)"]
	},
	"to eq()": {
		"prefix": "teq",
		"body": ["to eq($1)"]
	},
	"to have_attributes()": {
		"prefix": "tha",
		"body": ["to have_attributes($1)"]
	},
	"to match_array()": {
		"prefix": "tma",
		"body": [
			"to match_array(",
			"  [",
			"    $1",
			"  ]",
			")"
		]
	},
	"to have_received()": {
		"prefix": "thr",
		"body": ["to have_received($1)"]
	},
	"to receive()": {
		"prefix": "tr",
		"body": ["to receive($1)"]
	},
	"DateTime.new(2017, 1, 27, 12, 30)nowm": {
		"prefix": "nowm",
		"body": ["DateTime.new(2017, 1, 27, 12, 30)"]
	},
	"Timecop.freeze()": {
		"prefix": "tcf",
		"body": [
			"Timecop.freeze(${1:now})",
			"$2",
			"Timecop.return",
		]
	},
}
